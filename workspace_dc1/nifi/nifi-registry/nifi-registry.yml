---
# NiFi Deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nifi-registry
  namespace: et01-tkg-bigdata-prod
spec:
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: nifi-registry
  serviceName: nifi-registry
  template:
    metadata:
      labels:
        app: nifi-registry
    spec:
      serviceAccountName: bigdata
      containers:
      - name: nifi-registry
        image: "kapkiai/nifi-registry:1.15.1"
        imagePullPolicy: IfNotPresent
        command: 
        - sh
        - -c
        - |
          cat /opt/nifi-registry/nifi-registry-current/conf/providers.tmp > /opt/nifi-registry/nifi-registry-current/conf/providers.xml
          cat <<EOF>> /opt/nifi-registry/scripts/secure.sh
            #!/bin/sh -e

            #    Licensed to the Apache Software Foundation (ASF) under one or more
            #    contributor license agreements.  See the NOTICE file distributed with
            #    this work for additional information regarding copyright ownership.
            #    The ASF licenses this file to You under the Apache License, Version 2.0
            #    (the "License"); you may not use this file except in compliance with
            #    the License.  You may obtain a copy of the License at
            #
            #       http://www.apache.org/licenses/LICENSE-2.0
            #
            #    Unless required by applicable law or agreed to in writing, software
            #    distributed under the License is distributed on an "AS IS" BASIS,
            #    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            #    See the License for the specific language governing permissions and
            #    limitations under the License.

            scripts_dir='/opt/nifi-registry/scripts'

            [ -f "\${scripts_dir}/common.sh" ] && . "\${scripts_dir}/common.sh"

            # Perform idempotent changes of configuration to support secure environments
            echo 'Configuring environment with SSL settings'

            # Run the tls-toolkit in client mode to generate the truststore and keystore
            /opt/nifi-registry/nifi-toolkit-current/bin/tls-toolkit.sh client -c \${NIFI_CA_HOST:-nifi-ca-cs} -t \${TOKEN:-1234567890123456} --subjectAlternativeNames 10.3.41.36 --dn "CN=\$(hostname -f), OU=\${OU:-NIFI}"

            # Use jq to extract the passwords form the config.json generated by the tls-toolkit
            KEYSTORE_PASSWORD=\`jq -r '.keyStorePassword' ./config.json\`
            KEY_PASSWORD=\`jq -r '.keyPassword' ./config.json\`
            TRUSTSTORE_PASSWORD=\`jq -r '.trustStorePassword' ./config.json\`

            mv ./keystore.jks conf/
            mv ./truststore.jks conf/

            prop_replace 'nifi.registry.security.keystore'           "\${KEYSTORE_PATH}"
            prop_replace 'nifi.registry.security.keystoreType'       "\${KEYSTORE_TYPE:-jks}"
            prop_replace 'nifi.registry.security.keystorePasswd'     "\${KEYSTORE_PASSWORD}"
            prop_replace 'nifi.registry.security.keyPasswd'          "\${KEY_PASSWORD:-\$KEYSTORE_PASSWORD}"
            prop_replace 'nifi.registry.security.truststore'         "\${TRUSTSTORE_PATH}"
            prop_replace 'nifi.registry.security.truststoreType'     "\${TRUSTSTORE_TYPE:-jks}"
            prop_replace 'nifi.registry.security.truststorePasswd'   "\${TRUSTSTORE_PASSWORD}"

            # Disable HTTP and enable HTTPS
            prop_replace 'nifi.registry.web.http.port'   ''
            prop_replace 'nifi.registry.web.http.host'   ''
            prop_replace 'nifi.registry.web.https.port'  "\${NIFI_REGISTRY_WEB_HTTPS_PORT:-18443}"
            prop_replace 'nifi.registry.web.https.host'  "\${NIFI_REGISTRY_WEB_HTTPS_HOST:-\$HOSTNAME}"

            # Establish initial user and an associated admin identity
            sed -i -e 's|<property name="Initial User Identity 1">.*</property>|<property name="Initial User Identity 1">'"\${INITIAL_ADMIN_IDENTITY}"'</property>|'  \${NIFI_REGISTRY_HOME}/conf/authorizers.xml
            sed -i -e 's|<property name="Initial Admin Identity">.*</property>|<property name="Initial Admin Identity">'"\${INITIAL_ADMIN_IDENTITY}"'</property>|'  \${NIFI_REGISTRY_HOME}/conf/authorizers.xml

            # Change location of authorizations.xml and users.xml to a persistent volume location
            sed -i -e 's|<property name="Authorizations File">./conf/authorizations.xml</property>|<property name="Authorizations File">./auth_conf/authorizations.xml</property>|'                   \${NIFI_REGISTRY_HOME}/conf/authorizers.xml
            sed -i -e 's|<property name="Users File">./conf/users.xml</property>|<property name="Users File">./auth_conf/users.xml</property>|'                   \${NIFI_REGISTRY_HOME}/conf/authorizers.xml
          EOF

          /opt/nifi-registry/scripts/start.sh
        resources: 
          requests:
            cpu: "1"
            memory: "2Gi"
            ephemeral-storage: "2Gi"
          limits:
            cpu: "2"
            memory: "3Gi"
            ephemeral-storage: "3Gi"
        ports:
        - containerPort: 18443
          name: http-port
        - containerPort: 22
          name: ssh
        # - containerPort: 9088
        #   name: cluster
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NIFI_REGISTRY_WEB_HTTPS_PORT
          value: "18443"  
        - name: NIFI_REGISTRY_WEB_HTTPS_HOST
          value: $(HOSTNAME).nifi-registry.et01-tkg-bigdata-prod.svc.cluster.local
# I have tried documenting some configs here. Configs that are nifi related can be read from official nifi documenation and changes 
# effected to this configurations
          # LDAP Integration
        - name: AUTH
          value: "ldap" 
        - name: NIFI_ANALYTICS_PREDICT_ENABLED
          value: "true"
        - name: LDAP_AUTHENTICATION_STRATEGY
          value: SIMPLE
        - name: LDAP_MANAGER_DN
          value: CN=Bigdata Service Account,OU=BigData Users,OU=Domain Users,DC=safaricomet,DC=net
        - name: LDAP_MANAGER_PASSWORD
          value: lyOdmSBwCsZnD4dLnOAE
        - name: LDAP_URL
          value: ldap://10.3.108.11:389
        - name: LDAP_USER_SEARCH_BASE
          value: OU=BigData Users,OU=Domain Users,DC=safaricomet,DC=net
        - name: LDAP_USER_SEARCH_FILTER
          value: (sAMAccountName={0})
        - name: LDAP_IDENTITY_STRATEGY
          value: USE_USERNAME
        - name: NIFI_REGISTRY_DB_URL
          value: jdbc:postgresql://bigdata-psql-postgresql-headless:5432/nifireg  
        - name: NIFI_REGISTRY_DB_CLASS
          value: org.postgresql.Driver
        - name: NIFI_REGISTRY_DB_DIR
          value: /opt/nifi-registry/jars
        - name: NIFI_REGISTRY_DB_USER
          value: svc-bigdata-admin
        - name: NIFI_REGISTRY_DB_PASS
          value: lyOdmSBwCsZnD4dLnOAE

         # CA Configs
        - name: NIFI_CA_HOST    #NiFI CA as specified in CA server. default one is 'nifi-ca-cs', hostname for ca server. Make sure it marches with ca server
          value: nifi-ca-cs  
        - name: TOKEN     # Token to get cert from CA. Useful to prevent MITM attacks
          value: "1234578912345678912" 
        - name: OU    # You desired OU to generate certificates
          value: "BIGDATA"   
        - name: NAMESPACE # NiFi namespace, used in building nifi CA OU urls. Note: service name must be 'nifi'
          value: et01-tkg-bigdata-prod          
          # With our own CA server/client set up, the commented configs below are unnecessary
        - name: KEYSTORE_PATH
          value: "./conf/keystore.jks"
        - name: KEYSTORE_TYPE
          value: "jks"
        - name: TRUSTSTORE_PATH
          value: "./conf/truststore.jks"
        - name: TRUSTSTORE_TYPE
          value: "jks"

        - name: INITIAL_ADMIN_IDENTITY
          value: "Mathew.Kiprop" 
        - name: NIFI_WEB_PROXY_HOST  # Important when accessing nifi via LB/nodeIP else nifi will reject you
          value: "nifi-registry.big-data.safaricomet.net"

        volumeMounts:
          - mountPath: /opt/nifi-registry/nifi-registry-current/database
            name: database
          - mountPath: /opt/nifi-registry/nifi-registry-current/flow_storage
            name: flow-storage
          - mountPath: /opt/nifi-registry/nifi-registry-current/auth_conf
            name: auth
          - mountPath: /opt/nifi-registry/nifi-registry-current/logs
            name: logs
          - mountPath: /opt/nifi-registry/nifi-registry-current/conf/providers.tmp
            name: providers
            subPath: providers.tmp
      volumes:
        - emptyDir:
            medium: Memory
            sizeLimit: 2Gi
          name: logs    
        - name: "providers"
          configMap:
            name: nifiregproviders
            items:
              - key: "nifiregproviders.xml"
                path: "providers.tmp"


  volumeClaimTemplates:
  - metadata:
      name: database
    spec:
      storageClassName: nfs-bigdata
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 12Gi
  - metadata:
      name: flow-storage
    spec:
      storageClassName: nfs-bigdata
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 12Gi
 
  - metadata:
      name: auth
    spec:
      storageClassName: nfs-bigdata
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 5Gi
        