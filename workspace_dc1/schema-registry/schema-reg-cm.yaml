apiVersion: v1
data:
  registry-inmemory.yaml: |
    # registries configuration
    modules:
      - name: schema-registry
        className: com.hortonworks.registries.schemaregistry.webservice.SchemaRegistryModule
        config:
          schemaProviders:
            - providerClass: "com.hortonworks.registries.schemaregistry.avro.AvroSchemaProvider"
              defaultSerializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotSerializer"
              defaultDeserializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotDeserializer"
          # schema cache properties
          cache:
            enableCaching : true
    #       Define caching properties below
            properties:
    #          # inmemory schema versions cache size
              schemaCacheSize: 10000
    #          # inmemory schema version cache entry expiry interval after access
              schemaCacheExpiryInterval: 3600


    servletFilters:
    # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
    #   params:
    #     type: "kerberos"
    #     kerberos.principal: "HTTP/streamline-ui-host.com"
    #     kerberos.keytab: "/vagrant/keytabs/http.keytab"
    #     kerberos.name.rules: "RULE:[2:$1@$0]([jt]t@.*EXAMPLE.COM)s/.*/$MAPRED_USER/ RULE:[2:$1@$0]([nd]n@.*EXAMPLE.COM)s/.*/$HDFS_USER/DEFAULT"
    #     allowed.resources: "401.html,back-default.png,favicon.ico"
    #Note that it is highly recommended to force ssl connections if you are using the jwt handler config below. Unsecured connections will expose jwt
    # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
    #   params:
    #     type: "com.hortonworks.registries.auth.server.JWTAuthenticationHandler"
    #     allowed.resources: "401.html,back-default.png,favicon.ico"
    #     authentication.provider.url: "https://localhost:8883/gateway/knoxsso/api/v1/websso"
    #     public.key.pem: "<public key corresponding to the PKI key pair of the token issuer>"
     - className: "com.hortonworks.registries.schemaregistry.webservice.RewriteUriFilter"
       params:
         # value format is [<targetpath>,<paths-should-be-redirected-to>,*|]*
         # below /subjects and /schemas/ids are forwarded to /api/v1/confluent
         forwardPaths: "/api/v1/confluent,/subjects/*,/schemas/ids/*"
         redirectPaths: "/ui/,/"

    # HA configuration
    #haConfig:
    #  className: com.hortonworks.registries.ha.zk.ZKLeadershipParticipant
    #  config:
    #    # This url is a list of ZK servers separated by ,
    #    connect.url: "localhost:2181"
    #    # root node prefix in ZK for this instance
    #    root: "/registry"
    #    session.timeout.ms: 30000
    #    connection.timeout.ms: 20000
    #    retry.limit: 5
    #    retry.base.sleep.time.ms: 1000
    #    retry.max.sleep.time.ms: 5000

    # Filesystem based jar storage
    fileStorageConfiguration:
      className: "com.hortonworks.registries.common.util.LocalFileSystemStorage"
      properties:
        directory: "/tmp/schema-registry/jars"

    # storage provider configuration
    storageProviderConfiguration:
     providerClass: "com.hortonworks.registries.storage.impl.memory.InMemoryStorageManager"

    #swagger configuration
    swagger:
      resourcePackage: com.hortonworks.registries.schemaregistry.webservice

    #enable CORS, may want to disable in production
    enableCors: false

    server:
      applicationConnectors:
        - type: http
          port: 9090
      adminConnectors:
        - type: http
          port: 9091

    # Logging settings.
    logging:
      level: INFO
      loggers:
        com.hortonworks.registries: INFO
  registry-mysql.yaml: |
    # registries configuration
    modules:
      - name: schema-registry
        className: com.hortonworks.registries.schemaregistry.webservice.SchemaRegistryModule
        config:
          schemaProviders:
            - providerClass: "com.hortonworks.registries.schemaregistry.avro.AvroSchemaProvider"
              defaultSerializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotSerializer"
              defaultDeserializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotDeserializer"
          # schema cache properties
          cache:
            enableCaching : true
    #       Define caching properties below
            properties:
    #          # inmemory schema versions cache size
              schemaCacheSize: 10000
    #          # inmemory schema version cache entry expiry interval after access
              schemaCacheExpiryInterval: 3600

    servletFilters:
    # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
    #   params:
    #     type: "kerberos"
    #     kerberos.principal: "HTTP/streamline-ui-host.com"
    #     kerberos.keytab: "/vagrant/keytabs/http.keytab"
    #     kerberos.name.rules: "RULE:[2:$1@$0]([jt]t@.*EXAMPLE.COM)s/.*/$MAPRED_USER/ RULE:[2:$1@$0]([nd]n@.*EXAMPLE.COM)s/.*/$HDFS_USER/DEFAULT"
    #     allowed.resources: "401.html,back-default.png,favicon.ico"
    #Note that it is highly recommended to force ssl connections if you are using the jwt handler config below. Unsecured connections will expose jwt
    # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
    #   params:
    #     type: "com.hortonworks.registries.auth.server.JWTAuthenticationHandler"
    #     allowed.resources: "401.html,back-default.png,favicon.ico"
    #     authentication.provider.url: "https://localhost:8883/gateway/knoxsso/api/v1/websso"
    #     public.key.pem: "<public key corresponding to the PKI key pair of the token issuer>"
     - className: "com.hortonworks.registries.schemaregistry.webservice.RewriteUriFilter"
       params:
         # value format is [<targetpath>,<paths-should-be-redirected-to>,*|]*
         # below /subjects and /schemas/ids are forwarded to /api/v1/confluent
         forwardPaths: "/api/v1/confluent,/subjects/*,/schemas/ids/*"
         redirectPaths: "/ui/,/"

    # HA configuration
    #haConfig:
    #  className: com.hortonworks.registries.ha.zk.ZKLeadershipParticipant
    #  config:
    #    # This url is a list of ZK servers separated by ,
    #    connect.url: "localhost:2181"
    #    # root node prefix in ZK for this instance
    #    root: "/registry"
    #    session.timeout.ms: 30000
    #    connection.timeout.ms: 20000
    #    retry.limit: 5
    #    retry.base.sleep.time.ms: 1000
    #    retry.max.sleep.time.ms: 5000

    # Filesystem based jar storage
    fileStorageConfiguration:
      className: "com.hortonworks.registries.common.util.LocalFileSystemStorage"
      properties:
        directory: "/tmp/schema-registry/jars"

    # MySQL based jdbc provider configuration is:
    storageProviderConfiguration:
     providerClass: "com.hortonworks.registries.storage.impl.jdbc.JdbcStorageManager"
     properties:
       db.type: "mysql"
       queryTimeoutInSecs: 30
       db.properties:
         dataSourceClassName: "com.mysql.jdbc.jdbc2.optional.MysqlDataSource"
         dataSource.url: "jdbc:mysql://localhost:30306/registry"
         dataSource.user: "registry"
         dataSource.password: "password123"

    #swagger configuration
    swagger:
      resourcePackage: com.hortonworks.registries.schemaregistry.webservice

    #enable CORS, may want to disable in production
    enableCors: false

    #Set below 3 properties if server needs a proxy to connect. Useful to download mysql jar
    #httpProxyUrl: "http://proxyHost:port"
    #httpProxyUsername: "username"
    #httpProxyPassword: "password"

    server:
      applicationConnectors:
        - type: http
          port: 9090
      adminConnectors:
        - type: http
          port: 9091

    # Logging settings.
    logging:
      level: INFO
      loggers:
        com.hortonworks.registries: INFO
  registry-oracle-ssl.yaml: |
    # registries configuration
    modules:
      - name: schema-registry
        className: com.hortonworks.registries.schemaregistry.webservice.SchemaRegistryModule
        config:
          schemaProviders:
            - providerClass: "com.hortonworks.registries.schemaregistry.avro.AvroSchemaProvider"
              defaultSerializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotSerializer"
              defaultDeserializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotDeserializer"
          # schema cache properties
          cache:
            enableCaching : true
    #       Define caching properties below
            properties:
    #          # inmemory schema versions cache size
              schemaCacheSize: 10000
    #          # inmemory schema version cache entry expiry interval after access
              schemaCacheExpiryInterval: 3600

    servletFilters:
      # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
      #   params:
      #     type: "kerberos"
      #     kerberos.principal: "HTTP/streamline-ui-host.com"
      #     kerberos.keytab: "/vagrant/keytabs/http.keytab"
      #     kerberos.name.rules: "RULE:[2:$1@$0]([jt]t@.*EXAMPLE.COM)s/.*/$MAPRED_USER/ RULE:[2:$1@$0]([nd]n@.*EXAMPLE.COM)s/.*/$HDFS_USER/DEFAULT"
      #     allowed.resources: "401.html,back-default.png,favicon.ico"
      #Note that it is highly recommended to force ssl connections if you are using the jwt handler config below. Unsecured connections will expose jwt
      # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
      #   params:
      #     type: "com.hortonworks.registries.auth.server.JWTAuthenticationHandler"
      #     allowed.resources: "401.html,back-default.png,favicon.ico"
      #     authentication.provider.url: "https://localhost:8883/gateway/knoxsso/api/v1/websso"
      #     public.key.pem: "<public key corresponding to the PKI key pair of the token issuer>"
      - className: "com.hortonworks.registries.schemaregistry.webservice.RewriteUriFilter"
        params:
          # value format is [<targetpath>,<paths-should-be-redirected-to>,*|]*
          # below /subjects and /schemas/ids are forwarded to /api/v1/confluent
          forwardPaths: "/api/v1/confluent,/subjects/*,/schemas/ids/*"
          redirectPaths: "/ui/,/"

    # HA configuration
    #haConfig:
    #  className: com.hortonworks.registries.ha.zk.ZKLeadershipParticipant
    #  config:
    #    # This url is a list of ZK servers separated by ,
    #    connect.url: "localhost:2181"
    #    # root node prefix in ZK for this instance
    #    root: "/registry"
    #    session.timeout.ms: 30000
    #    connection.timeout.ms: 20000
    #    retry.limit: 5
    #    retry.base.sleep.time.ms: 1000
    #    retry.max.sleep.time.ms: 5000

    # Filesystem based jar storage
    fileStorageConfiguration:
      className: "com.hortonworks.registries.common.util.LocalFileSystemStorage"
      properties:
        directory: "/tmp/schema-registry/jars"

    # Oracle based jdbc provider configuration is:
    storageProviderConfiguration:
      providerClass: "com.hortonworks.registries.storage.impl.jdbc.JdbcStorageManager"
      properties:
        db.type: "oracle"
        queryTimeoutInSecs: 5
        db.properties:
          dataSourceClassName: "oracle.jdbc.pool.OracleDataSource"
          dataSource.url: "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcps)(HOST=0.0.0.0)(PORT=2484))(CONNECT_DATA=(SERVICE_NAME=ORCLPDB1.localdomain))(SECURITY=(SSL_SERVER_CERT_DN=\"CN=server\")))"
          dataSource.user: "registry_user"
          dataSource.password: "registry_user_passwd"
          connection.properties:
          # User can specify Oracle connection properties below which can also be used for configuring TLS.
          # For example, To enable TLS using Oracle Wallets add below properties
             oracle.net.ssl_version: "1"
             oracle.net.ssl_server_dn_match: "true"
             javax.net.ssl.trustStore: "~/Oracle/Wallets/TrustStore/cwallet.sso"
             javax.net.ssl.trustStoreType: "SSO"
             javax.net.ssl.keyStore: "~/Oracle/Wallets/Client/cwallet.sso"
             javax.net.ssl.keyStoreType: "SSO"


    #swagger configuration
    swagger:
      resourcePackage: com.hortonworks.registries.schemaregistry.webservice

    #enable CORS, may want to disable in production
    enableCors: false

    server:
      applicationConnectors:
        - type: http
          port: 9090
      adminConnectors:
        - type: http
          port: 9091

    # Logging settings.
    logging:
      level: INFO
      loggers:
        com.hortonworks.registries: INFO
  registry-oracle.yaml: |
    # registries configuration
    modules:
      - name: schema-registry
        className: com.hortonworks.registries.schemaregistry.webservice.SchemaRegistryModule
        config:
          schemaProviders:
            - providerClass: "com.hortonworks.registries.schemaregistry.avro.AvroSchemaProvider"
              defaultSerializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotSerializer"
              defaultDeserializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotDeserializer"
          # schema cache properties
          cache:
            enableCaching : true
    #       Define caching properties below
            properties:
    #          # inmemory schema versions cache size
              schemaCacheSize: 10000
    #          # inmemory schema version cache entry expiry interval after access
              schemaCacheExpiryInterval: 3600

    servletFilters:
    # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
    #   params:
    #     type: "kerberos"
    #     kerberos.principal: "HTTP/streamline-ui-host.com"
    #     kerberos.keytab: "/vagrant/keytabs/http.keytab"
    #     kerberos.name.rules: "RULE:[2:$1@$0]([jt]t@.*EXAMPLE.COM)s/.*/$MAPRED_USER/ RULE:[2:$1@$0]([nd]n@.*EXAMPLE.COM)s/.*/$HDFS_USER/DEFAULT"
    #     allowed.resources: "401.html,back-default.png,favicon.ico"
    #Note that it is highly recommended to force ssl connections if you are using the jwt handler config below. Unsecured connections will expose jwt
    # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
    #   params:
    #     type: "com.hortonworks.registries.auth.server.JWTAuthenticationHandler"
    #     allowed.resources: "401.html,back-default.png,favicon.ico"
    #     authentication.provider.url: "https://localhost:8883/gateway/knoxsso/api/v1/websso"
    #     public.key.pem: "<public key corresponding to the PKI key pair of the token issuer>"
     - className: "com.hortonworks.registries.schemaregistry.webservice.RewriteUriFilter"
       params:
         # value format is [<targetpath>,<paths-should-be-redirected-to>,*|]*
         # below /subjects and /schemas/ids are forwarded to /api/v1/confluent
         forwardPaths: "/api/v1/confluent,/subjects/*,/schemas/ids/*"
         redirectPaths: "/ui/,/"

    # HA configuration
    #haConfig:
    #  className: com.hortonworks.registries.ha.zk.ZKLeadershipParticipant
    #  config:
    #    # This url is a list of ZK servers separated by ,
    #    connect.url: "localhost:2181"
    #    # root node prefix in ZK for this instance
    #    root: "/registry"
    #    session.timeout.ms: 30000
    #    connection.timeout.ms: 20000
    #    retry.limit: 5
    #    retry.base.sleep.time.ms: 1000
    #    retry.max.sleep.time.ms: 5000

    # Filesystem based jar storage
    fileStorageConfiguration:
      className: "com.hortonworks.registries.common.util.LocalFileSystemStorage"
      properties:
        directory: "/tmp/schema-registry/jars"

    # Oracle based jdbc provider configuration is:
    storageProviderConfiguration:
     providerClass: "com.hortonworks.registries.storage.impl.jdbc.JdbcStorageManager"
     properties:
       db.type: "oracle"
       queryTimeoutInSecs: 5
       db.properties:
         dataSourceClassName: "oracle.jdbc.pool.OracleDataSource"
         dataSource.url: "jdbc:oracle:thin:@localhost:1521/orclpdb1.localdomain"
         dataSource.user: "registry_user"
         dataSource.password: "registry_user_passwd"

    #swagger configuration
    swagger:
      resourcePackage: com.hortonworks.registries.schemaregistry.webservice

    #enable CORS, may want to disable in production
    enableCors: false

    server:
      applicationConnectors:
        - type: http
          port: 9090
      adminConnectors:
        - type: http
          port: 9091

    # Logging settings.
    logging:
      level: INFO
      loggers:
        com.hortonworks.registries: INFO
  registry-postgres.yaml: |
    # registries configuration
    modules:
      - name: schema-registry
        className: com.hortonworks.registries.schemaregistry.webservice.SchemaRegistryModule
        config:
          schemaProviders:
            - providerClass: "com.hortonworks.registries.schemaregistry.avro.AvroSchemaProvider"
              defaultSerializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotSerializer"
              defaultDeserializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotDeserializer"
          # schema cache properties
          cache:
            enableCaching : true
    #       Define caching properties below
            properties:
    #          # inmemory schema versions cache size
              schemaCacheSize: 10000
    #          # inmemory schema version cache entry expiry interval after access
              schemaCacheExpiryInterval: 3600

    servletFilters:
    # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
    #   params:
    #     type: "kerberos"
    #     kerberos.principal: "HTTP/streamline-ui-host.com"
    #     kerberos.keytab: "/vagrant/keytabs/http.keytab"
    #     kerberos.name.rules: "RULE:[2:$1@$0]([jt]t@.*EXAMPLE.COM)s/.*/$MAPRED_USER/ RULE:[2:$1@$0]([nd]n@.*EXAMPLE.COM)s/.*/$HDFS_USER/DEFAULT"
    #     allowed.resources: "401.html,back-default.png,favicon.ico"
    #Note that it is highly recommended to force ssl connections if you are using the jwt handler config below. Unsecured connections will expose jwt
    # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
    #   params:
    #     type: "com.hortonworks.registries.auth.server.JWTAuthenticationHandler"
    #     allowed.resources: "401.html,back-default.png,favicon.ico"
    #     authentication.provider.url: "https://localhost:8883/gateway/knoxsso/api/v1/websso"
    #     public.key.pem: "<public key corresponding to the PKI key pair of the token issuer>"
     - className: "com.hortonworks.registries.schemaregistry.webservice.RewriteUriFilter"
       params:
         # value format is [<targetpath>,<paths-should-be-redirected-to>,*|]*
         # below /subjects and /schemas/ids are forwarded to /api/v1/confluent
         forwardPaths: "/api/v1/confluent,/subjects/*,/schemas/ids/*"
         redirectPaths: "/ui/,/"

    # HA configuration
    haConfig:
     className: com.hortonworks.registries.ha.zk.ZKLeadershipParticipant
     config:
       # This url is a list of ZK servers separated by ,
       connect.url: "bigdata-zk-zookeeper-headless:2181"
       # root node prefix in ZK for this instance
       root: "/registry"
       session.timeout.ms: 30000
       connection.timeout.ms: 20000
       retry.limit: 5
       retry.base.sleep.time.ms: 1000
       retry.max.sleep.time.ms: 5000

    # Filesystem based jar storage
    fileStorageConfiguration:
      className: "com.hortonworks.registries.common.util.LocalFileSystemStorage"
      properties:
        directory: "/tmp/schema-registry/jars"

    # Postgres based jdbc provider configuration is:
    storageProviderConfiguration:
     providerClass: "com.hortonworks.registries.storage.impl.jdbc.JdbcStorageManager"
     properties:
       db.type: "postgresql"
       queryTimeoutInSecs: 30
       db.properties:
         dataSourceClassName: "org.postgresql.ds.PGSimpleDataSource"
         dataSource.url: "jdbc:postgresql://bigdata-psql-postgresql/schemareg"
         dataSource.user: "svc-bigdata-admin"
         dataSource.password: "lyOdmSBwCsZnD4dLnOAE"

    #swagger configuration
    swagger:
      resourcePackage: com.hortonworks.registries.schemaregistry.webservice

    #enable CORS, may want to disable in production
    enableCors: false

    server:
      applicationConnectors:
        - type: http
          port: 9090
      adminConnectors:
        - type: http
          port: 9091

    # Logging settings.
    logging:
      level: INFO
      loggers:
        com.hortonworks.registries: INFO
  registry-ssl.yaml: "# registries configuration\nmodules:\n# tag-registry configuration\n#
    \ - name: tag-registry\n#    className: com.hortonworks.iotas.registries.tag.service.TagRegistryModule\n#\n#
    schema-registry configuration\n  - name: schema-registry\n    className: com.hortonworks.registries.schemaregistry.webservice.SchemaRegistryModule\n
    \   config:\n      schemaProviders:\n        - providerClass: \"com.hortonworks.registries.schemaregistry.avro.AvroSchemaProvider\"\n
    \         defaultSerializerClass: \"com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotSerializer\"\n
    \         defaultDeserializerClass: \"com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotDeserializer\"\n\n
    \     # schema cache properties\n      cache:\n        enableCaching : true\n#
    \      Define caching properties below\n        properties:\n          # inmemory
    schema versions cache size\n          schemaCacheSize: 10000\n          # inmemory
    schema version cache entry expiry interval after access\n          schemaCacheExpiryInterval:
    3600\n\nservletFilters:\n# - className: \"com.hortonworks.registries.auth.server.AuthenticationFilter\"\n#
    \  params:\n#     type: \"kerberos\"\n#     kerberos.principal: \"HTTP/streamline-ui-host.com\"\n#
    \    kerberos.keytab: \"/vagrant/keytabs/http.keytab\"\n#     kerberos.name.rules:
    \"RULE:[2:$1@$0]([jt]t@.*EXAMPLE.COM)s/.*/$MAPRED_USER/ RULE:[2:$1@$0]([nd]n@.*EXAMPLE.COM)s/.*/$HDFS_USER/DEFAULT\"\n#
    \    allowed.resources: \"401.html,back-default.png,favicon.ico\"\n#Note that
    it is highly recommended to force ssl connections if you are using the jwt handler
    config below. Unsecured connections will expose jwt\n# - className: \"com.hortonworks.registries.auth.server.AuthenticationFilter\"\n#
    \  params:\n#     type: \"com.hortonworks.registries.auth.server.JWTAuthenticationHandler\"\n#
    \    allowed.resources: \"401.html,back-default.png,favicon.ico\"\n#     authentication.provider.url:
    \"https://localhost:8883/gateway/knoxsso/api/v1/websso\"\n#     public.key.pem:
    \"<public key corresponding to the PKI key pair of the token issuer>\"\n - className:
    \"com.hortonworks.registries.schemaregistry.webservice.RewriteUriFilter\"\n   params:\n
    \    # value format is [<targetpath>,<paths-should-be-redirected-to>,*|]*\n     #
    below /subjects and /schemas/ids are forwarded to /api/v1/confluent\n     forwardPaths:
    \"/api/v1/confluent,/subjects/*,/schemas/ids/*\"\n     redirectPaths: \"/ui/,/\"\n\n#
    HA configuration\n## When no configuration is set, then all the nodes in schema
    registry cluster are eligible to write to the backend storage.\n#haConfig:\n#
    \ className: com.hortonworks.registries.ha.zk.ZKLeadershipParticipant\n#  config:\n#
    \   # This url is a list of ZK servers separated by ,\n#    connect.url: \"localhost:2181\"\n#
    \   # root node prefix in ZK for this instance\n#    root: \"/registry\"\n#    session.timeout.ms:
    30000\n#    connection.timeout.ms: 20000\n#    retry.limit: 5\n#    retry.base.sleep.time.ms:
    1000\n#    retry.max.sleep.time.ms: 5000\n\n# Filesystem based jar storage\nfileStorageConfiguration:\n
    \ className: \"com.hortonworks.registries.common.util.LocalFileSystemStorage\"\n
    \ properties:\n    directory: \"/tmp\"\n# storage provider configuration\nstorageProviderConfiguration:\n
    providerClass: \"com.hortonworks.registries.storage.impl.memory.InMemoryStorageManager\"\n#
    Example configuration for phoenix based JDBC driver\n#storageProviderConfiguration:\n#
    providerClass: \"com.hortonworks.registries.storage.impl.jdbc.JdbcStorageManager\"\n#
    properties:\n#   db.type: \"phoenix\"\n#   queryTimeoutInSecs: 30\n#   db.properties:\n#
    \    jdbcDriverClass: \"com.hortonworks.phoenix.jdbc.PhoenixDriver\"\n#     jdbcUrl:
    \"jdbc:phoenix:localhost:2181\"\n#\n# MySQL based jdbc provider configuration
    is:\n#storageProviderConfiguration:\n# providerClass: \"com.hortonworks.registries.storage.impl.jdbc.JdbcStorageManager\"\n#
    properties:\n#   db.type: \"mysql\"\n#   queryTimeoutInSecs: 30\n#   db.properties:\n#
    \    dataSourceClassName: \"com.mysql.jdbc.jdbc2.optional.MysqlDataSource\"\n#
    \    dataSource.url: \"jdbc:mysql://localhost/schema_registry\"\n#     dataSource.user:
    \"\"\n#     dataSource.password: \"\"\n\n#swagger configuration\nswagger:\n  resourcePackage:
    com.hortonworks.registries.schemaregistry.webservice\n\n#enable CORS, may want
    to disable in production\nenableCors: false\n\n#Set below 3 properties if server
    needs a proxy to connect. Useful to download mysql jar\n#httpProxyUrl: \"http://proxyHost:port\"\n#httpProxyUsername:
    \"username\"\n#httpProxyPassword: \"password\"\n\nserver:\n  applicationConnectors:\n
    \   - type: https\n      port: 8445\n      keyStorePath: ./keystore.p12 \n      keyStorePassword:
    6366107884598f3e2c4a7734522ce2bf \n      validateCerts: false\n      validatePeers:
    false \n  adminConnectors:\n    - type: https\n      port: 8446\n      keyStorePath:
    ./keystore.p12 \n      keyStorePassword: 6366107884598f3e2c4a7734522ce2bf\n      validateCerts:
    false\n      validatePeers: false\n\n# Logging settings.\nlogging:\n\n  # The
    default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or
    ALL.\n  level: INFO\n\n  # Logger-specific levels.\n  loggers:\n\n    # Sets the
    level for 'com.example.app' to DEBUG.\n    com.hortonworks.registries: DEBUG\n\n\n
    \ appenders:\n    - type: console\n#    - type: file\n#      threshold: DEBUG\n#
    \     logFormat: \"%-6level [%d{HH:mm:ss.SSS}] [%t] %logger{5} - %X{code} %msg
    %n\"\n#      currentLogFilename: /tmp/application.log\n#      archivedLogFilenamePattern:
    /tmp/application-%d{yyyy-MM-dd}-%i.log.gz\n#      archivedFileCount: 7\n#      timeZone:
    UTC\n#      maxFileSize: 10MB\n\n#jerseyClient:\n#  minThreads: 1\n#  maxThreads:
    16\n#  workQueueSize: 1000\n#  gzipEnabled: true\n#  gzipEnabledForRequests: true\n#
    \ chunkedEncodingEnabled: true\n#  timeout: 1000ms\n#  connectionTimeout: 1000ms\n#
    \ timeToLive: 1h\n#  cookiesEnabled: false\n#  maxConnections: 10\n#  maxConnectionsPerRoute:
    1024\n#  keepAlive: 0ms\n#  retries: 10\n#  userAgent: Storm-Client\n\n"
  registry.yaml: |+
    # registries configuration
    modules:
    # tag-registry configuration
    #  - name: tag-registry
    #    className: com.hortonworks.iotas.registries.tag.service.TagRegistryModule
    #
    # schema-registry configuration
      - name: schema-registry
        className: com.hortonworks.registries.schemaregistry.webservice.SchemaRegistryModule
        config:
          schemaProviders:
            - providerClass: "com.hortonworks.registries.schemaregistry.avro.AvroSchemaProvider"
              defaultSerializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotSerializer"
              defaultDeserializerClass: "com.hortonworks.registries.schemaregistry.serdes.avro.AvroSnapshotDeserializer"

          # schema cache properties
          cache:
            enableCaching : true
          # Define caching properties below
            properties:
              # inmemory schema versions cache size
              schemaCacheSize: 10000
              # inmemory schema version cache entry expiry interval after access
              schemaCacheExpiryInterval: 3600

    servletFilters:
    # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
    #   params:
    #     type: "kerberos"
    #     kerberos.principal: "HTTP/streamline-ui-host.com"
    #     kerberos.keytab: "/vagrant/keytabs/http.keytab"
    #     kerberos.name.rules: "RULE:[2:$1@$0]([jt]t@.*EXAMPLE.COM)s/.*/$MAPRED_USER/ RULE:[2:$1@$0]([nd]n@.*EXAMPLE.COM)s/.*/$HDFS_USER/DEFAULT"
    #     allowed.resources: "401.html,back-default.png,favicon.ico"
    #Note that it is highly recommended to force ssl connections if you are using the jwt handler config below. Unsecured connections will expose jwt
    # - className: "com.hortonworks.registries.auth.server.AuthenticationFilter"
    #   params:
    #     type: "com.hortonworks.registries.auth.server.JWTAuthenticationHandler"
    #     allowed.resources: "401.html,back-default.png,favicon.ico"
    #     authentication.provider.url: "https://localhost:8883/gateway/knoxsso/api/v1/websso"
    #     public.key.pem: "<public key corresponding to the PKI key pair of the token issuer>"
     - className: "com.hortonworks.registries.schemaregistry.webservice.RewriteUriFilter"
       params:
         # value format is [<targetpath>,<paths-should-be-redirected-to>,*|]*
         # below /subjects and /schemas/ids are forwarded to /api/v1/confluent
         forwardPaths: "/api/v1/confluent,/subjects/*,/schemas/ids/*"
         redirectPaths: "/ui/,/"

    # HA configuration
    ## When no configuration is set, then all the nodes in schema registry cluster are eligible to write to the backend storage.
    #haConfig:
    #  className: com.hortonworks.registries.ha.zk.ZKLeadershipParticipant
    #  config:
    #    # This url is a list of ZK servers separated by ,
    #    connect.url: "localhost:2181"
    #    # root node prefix in ZK for this instance
    #    root: "/registry"
    #    session.timeout.ms: 30000
    #    connection.timeout.ms: 20000
    #    retry.limit: 5
    #    retry.base.sleep.time.ms: 1000
    #    retry.max.sleep.time.ms: 5000

    # Filesystem based jar storage
    fileStorageConfiguration:
      className: "com.hortonworks.registries.common.util.LocalFileSystemStorage"
      properties:
        directory: "/tmp"
    # storage provider configuration
    storageProviderConfiguration:
     providerClass: "com.hortonworks.registries.storage.impl.memory.InMemoryStorageManager"
    # Example configuration for phoenix based JDBC driver
    #storageProviderConfiguration:
    # providerClass: "com.hortonworks.registries.storage.impl.jdbc.JdbcStorageManager"
    # properties:
    #   db.type: "phoenix"
    #   queryTimeoutInSecs: 30
    #   db.properties:
    #     jdbcDriverClass: "com.hortonworks.phoenix.jdbc.PhoenixDriver"
    #     jdbcUrl: "jdbc:phoenix:localhost:2181"
    #
    # MySQL based jdbc provider configuration is:
    #storageProviderConfiguration:
    # providerClass: "com.hortonworks.registries.storage.impl.jdbc.JdbcStorageManager"
    # properties:
    #   db.type: "mysql"
    #   queryTimeoutInSecs: 30
    #   db.properties:
    #     dataSourceClassName: "com.mysql.jdbc.jdbc2.optional.MysqlDataSource"
    #     dataSource.url: "jdbc:mysql://localhost/schema_registry"
    #     dataSource.user: ""
    #     dataSource.password: ""

    #swagger configuration
    swagger:
      resourcePackage: com.hortonworks.registries.schemaregistry.webservice

    #enable CORS, may want to disable in production
    enableCors: false

    #Set below 3 properties if server needs a proxy to connect. Useful to download mysql jar
    #httpProxyUrl: "http://proxyHost:port"
    #httpProxyUsername: "username"
    #httpProxyPassword: "password"

    server:
    #  softNofileLimit: 1000
    #  hardNofileLimit: 1000
      applicationConnectors:
        - type: http
          port: 9090
    #    - type: https
    #      port: 8443
    #      keyStorePath: example.keystore
    #      keyStorePassword: example
    #      validateCerts: false
    # this requires the alpn-boot library on the JVM's boot classpath
    #    - type: spdy3
    #      port: 8445
    #      keyStorePath: example.keystore
    #      keyStorePassword: example
    #      validateCerts: false
      adminConnectors:
        - type: http
          port: 9091
    #    - type: https
    #      port: 8444
    #      keyStorePath: example.keystore
    #      keyStorePassword: example
    #      validateCerts: false

    # Logging settings.
    logging:

      # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
      level: INFO

      # Logger-specific levels.
      loggers:

        # Sets the level for 'com.example.app' to DEBUG.
        com.hortonworks.registries: DEBUG


      appenders:
        - type: console
    #    - type: file
    #      threshold: DEBUG
    #      logFormat: "%-6level [%d{HH:mm:ss.SSS}] [%t] %logger{5} - %X{code} %msg %n"
    #      currentLogFilename: /tmp/application.log
    #      archivedLogFilenamePattern: /tmp/application-%d{yyyy-MM-dd}-%i.log.gz
    #      archivedFileCount: 7
    #      timeZone: UTC
    #      maxFileSize: 10MB

    #jerseyClient:
    #  minThreads: 1
    #  maxThreads: 16
    #  workQueueSize: 1000
    #  gzipEnabled: true
    #  gzipEnabledForRequests: true
    #  chunkedEncodingEnabled: true
    #  timeout: 1000ms
    #  connectionTimeout: 1000ms
    #  timeToLive: 1h
    #  cookiesEnabled: false
    #  maxConnections: 10
    #  maxConnectionsPerRoute: 1024
    #  keepAlive: 0ms
    #  retries: 10
    #  userAgent: Storm-Client

kind: ConfigMap
metadata:
  name: schemareg-config
