{{- if .Values.ingress.enabled -}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "spark.name" . }}-ingress
  labels:
    app.kubernetes.io/name: {{ include "spark.name" . }}
    app.kubernetes.io/component: spark
    {{- include "spark.labels" . | nindent 4 }}
  annotations: 
     ingress.kubernetes.io/hsts: "true"
     ingress.kubernetes.io/hsts-preload: "true"
     ingress.kubernetes.io/hsts-include-subdomains: "true"
     ingress.kubernetes.io/hsts-max-age: "100"
     ingress.kubernetes.io/rewrite-target: /
     kubernetes.io/ingress.class: nginx
     nginx.ingress.kubernetes.io/auth-response-headers: x-username, x-groups
     nginx.ingress.kubernetes.io/auth-snippet: |
       proxy_set_header Ldap-Allowed-Groups "bigdataadmins, Bigdata Users, ET-RDS-Users";
     nginx.ingress.kubernetes.io/auth-url: https://nginx-ldap.ingress-nginx.svc.cluster.local/auth
     nginx.ingress.kubernetes.io/server-snippet: |
       error_page 401 = @login;
       location @login {
         return 302 https://nginx-ldap.big-data.safaricomet.net/?protocol=$pass_access_scheme&callback=$host;
       }
     nginx.ingress.kubernetes.io/configuration-snippet: |
       more_set_headers "X-Frame-Options: SAMEORIGIN";
       more_set_headers "X-XSS-protection: 1";
       more_set_headers "X-Content-Type-Options: nosniff";
       more_set_headers "Access-Control-Allow-Origin: accept, content-type, authorization";

spec:
  rules:
    {{- if .Values.ingress.hostname }}
    {{- toYaml .Values.ingress.hostPaths | nindent 10 }}
    {{- end }}
{{- end -}}