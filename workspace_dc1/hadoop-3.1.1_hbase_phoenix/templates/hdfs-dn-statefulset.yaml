apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "hadoop.fullname" . }}-hdfs-dn
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/hadoop-configmap.yaml") . | sha256sum }}
  labels:
    app: {{ include "hadoop.name" . }}
    chart: {{ include "hadoop.chart" . }}
    release: {{ .Release.Name }}
    component: hdfs-dn
spec:
  serviceName: {{ include "hadoop.fullname" . }}-hdfs-dn
  replicas: {{ .Values.hdfs.dataNode.replicas }}
  selector:
    matchLabels:
      app: {{ include "hadoop.name" . }}
      release: {{ .Release.Name }}
      component: hdfs-dn
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
      labels:
        app: {{ include "hadoop.name" . }}
        release: {{ .Release.Name }}
        component: hdfs-dn
    spec:
{{- if .Values.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecret }}
{{- end }}
      serviceAccountName: {{.Values.serviceAccount }}
      affinity:
        podAntiAffinity:
        {{- if eq .Values.antiAffinity "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
                matchExpressions:
                - key: dedicated
                  operator: In
                  values:
                  - Hadoop
        {{- else if eq .Values.antiAffinity "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 5
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchExpressions:
                - key: dedicated
                  operator: In
                  values:
                  - Hadoop
        {{- end }}
      terminationGracePeriodSeconds: 0
      containers:
      - name: hdfs-dn
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        env: 
{{ toYaml .Values.hdfs.dataNode.extraEnvVars | indent 10 }}
        command:
           - "/bin/bash"
           - "/tmp/hadoop-config/bootstrap.sh"
           - "-d"
        resources:
{{ toYaml .Values.hdfs.dataNode.resources | indent 10 }}
        ports:
        - containerPort: 17107
          name: dn-jmx-metrics
          protocol: TCP
        volumeMounts:
        - name: hadoop-config
          mountPath: /tmp/hadoop-config
        - name: dfs
          mountPath: /dfs/data
      - name: hbase-regionserver
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        ports:
        - containerPort: 17109
          name: rs-jmx-metrics
          protocol: TCP
        command:
           - "/bin/bash"
           - "/tmp/hbase-config/bootstrap.sh"
           - "-d"
           - "regionserver"
        env:
{{ toYaml .Values.hbase.regionServer.extraEnvVars | indent 10 }}
        resources:
{{ toYaml .Values.hbase.regionServer.resources | indent 10 }}
        volumeMounts:
        - name: hbase-config
          mountPath: /tmp/hbase-config
      volumes:
      - name: hadoop-config
        configMap:
          name: {{ include "hadoop.fullname" . }}
      - name: hbase-config
        configMap:
          name: {{ include "hadoop.fullname" . }}-hbase
  volumeClaimTemplates:
  - metadata:
      name: dfs
    spec:
      accessModes:
      - {{ .Values.persistence.dataNode.accessMode | quote }}
      resources:
        requests:
          storage: {{ .Values.persistence.dataNode.size | quote }}
{{- if .Values.persistence.dataNode.storageClass }}
{{- if (eq "-" .Values.persistence.dataNode.storageClass) }}
      storageClassName: ""
{{- else }}
      storageClassName: "{{ .Values.persistence.dataNode.storageClass }}"
{{- end }}
{{- end }}
