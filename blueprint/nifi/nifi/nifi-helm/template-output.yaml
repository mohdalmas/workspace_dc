---
# Source: nifi/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nifi-config
  labels:
    app: "nifi"
    chart: "nifi-1.0.4"
    release: "nifi"
    heritage: "Helm"
data:
  authorizers.xml: |-
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <!--
      Licensed to the Apache Software Foundation (ASF) under one or more
      contributor license agreements.  See the NOTICE file distributed with
      this work for additional information regarding copyright ownership.
      The ASF licenses this file to You under the Apache License, Version 2.0
      (the "License"); you may not use this file except in compliance with
      the License.  You may obtain a copy of the License at
          http://www.apache.org/licenses/LICENSE-2.0
      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    -->
    <!--
        This file lists the userGroupProviders, accessPolicyProviders, and authorizers to use when running securely. In order
        to use a specific authorizer it must be configured here and it's identifier must be specified in the nifi.properties file.
        If the authorizer is a managedAuthorizer, it may need to be configured with an accessPolicyProvider and an userGroupProvider.
        This file allows for configuration of them, but they must be configured in order:
        ...
        all userGroupProviders
        all accessPolicyProviders
        all Authorizers
        ...
    -->
    <authorizers>
        <!--
            The FileUserGroupProvider will provide support for managing users and groups which is backed by a file
            on the local file system.
            - Users File - The file where the FileUserGroupProvider will store users and groups.
            - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
                be used to load the users and groups into the Users File.
            - Initial User Identity [unique key] - The identity of a users and systems to seed the Users File. The name of
                each property must be unique, for example: "Initial User Identity A", "Initial User Identity B",
                "Initial User Identity C" or "Initial User Identity 1", "Initial User Identity 2", "Initial User Identity 3"
                NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities,
                so the values should be the unmapped identities (i.e. full DN from a certificate).
        -->
        <userGroupProvider>
            <identifier>file-user-group-provider</identifier>
            <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
            <property name="Users File">./conf/users.xml</property>
            <property name="Legacy Authorized Users File"></property>
            <property name="Initial User Identity 0">CN=nifi-0.nifi-headless.default.svc.cluster.local, OU=NIFI</property>
            <property name="Initial User Identity 1">CN=nifi-1.nifi-headless.default.svc.cluster.local, OU=NIFI</property>
            <property name="Initial User Identity admin">cn=admin,dc=example,dc=org</property>
        </userGroupProvider>
        <!--
            The LdapUserGroupProvider will retrieve users and groups from an LDAP server. The users and groups
            are not configurable.
            'Authentication Strategy' - How the connection to the LDAP server is authenticated. Possible
                values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.
            'Manager DN' - The DN of the manager that is used to bind to the LDAP server to search for users.
            'Manager Password' - The password of the manager that is used to bind to the LDAP server to
                search for users.
            'TLS - Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS or START_TLS.
            'TLS - Keystore Password' - Password for the Keystore that is used when connecting to LDAP
                using LDAPS or START_TLS.
            'TLS - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using
                LDAPS or START_TLS (i.e. JKS or PKCS12).
            'TLS - Truststore' - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.
            'TLS - Truststore Password' - Password for the Truststore that is used when connecting to
                LDAP using LDAPS or START_TLS.
            'TLS - Truststore Type' - Type of the Truststore that is used when connecting to LDAP using
                LDAPS or START_TLS (i.e. JKS or PKCS12).
            'TLS - Client Auth' - Client authentication policy when connecting to LDAP using LDAPS or START_TLS.
                Possible values are REQUIRED, WANT, NONE.
            'TLS - Protocol' - Protocol to use when connecting to LDAP using LDAPS or START_TLS. (i.e. TLS,
                TLSv1.1, TLSv1.2, etc).
            'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down gracefully
                before the target context is closed. Defaults to false.
            'Referral Strategy' - Strategy for handling referrals. Possible values are FOLLOW, IGNORE, THROW.
            'Connect Timeout' - Duration of connect timeout. (i.e. 10 secs).
            'Read Timeout' - Duration of read timeout. (i.e. 10 secs).
            'Url' - Space-separated list of URLs of the LDAP servers (i.e. ldap://<hostname>:<port>).
            'Page Size' - Sets the page size when retrieving users and groups. If not specified, no paging is performed.
            'Sync Interval' - Duration of time between syncing users and groups (i.e. 30 mins). Minimum allowable value is 10 secs.
            'User Search Base' - Base DN for searching for users (i.e. ou=users,o=nifi). Required to search users.
            'User Object Class' - Object class for identifying users (i.e. person). Required if searching users.
            'User Search Scope' - Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
            'User Search Filter' - Filter for searching for users against the 'User Search Base' (i.e. (memberof=cn=team1,ou=groups,o=nifi) ). Optional.
            'User Identity Attribute' - Attribute to use to extract user identity (i.e. cn). Optional. If not set, the entire DN is used.
            'User Group Name Attribute' - Attribute to use to define group membership (i.e. memberof). Optional. If not set
                group membership will not be calculated through the users. Will rely on group membership being defined
                through 'Group Member Attribute' if set. The value of this property is the name of the attribute in the user ldap entry that
                associates them with a group. The value of that user attribute could be a dn or group name for instance. What value is expected
                is configured in the 'User Group Name Attribute - Referenced Group Attribute'.
            'User Group Name Attribute - Referenced Group Attribute' - If blank, the value of the attribute defined in 'User Group Name Attribute'
                is expected to be the full dn of the group. If not blank, this property will define the attribute of the group ldap entry that
                the value of the attribute defined in 'User Group Name Attribute' is referencing (i.e. name). Use of this property requires that
                'Group Search Base' is also configured.
            'Group Search Base' - Base DN for searching for groups (i.e. ou=groups,o=nifi). Required to search groups.
            'Group Object Class' - Object class for identifying groups (i.e. groupOfNames). Required if searching groups.
            'Group Search Scope' - Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
            'Group Search Filter' - Filter for searching for groups against the 'Group Search Base'. Optional.
            'Group Name Attribute' - Attribute to use to extract group name (i.e. cn). Optional. If not set, the entire DN is used.
            'Group Member Attribute' - Attribute to use to define group membership (i.e. member). Optional. If not set
                group membership will not be calculated through the groups. Will rely on group membership being defined
                through 'User Group Name Attribute' if set. The value of this property is the name of the attribute in the group ldap entry that
                associates them with a user. The value of that group attribute could be a dn or memberUid for instance. What value is expected
                is configured in the 'Group Member Attribute - Referenced User Attribute'. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
            'Group Member Attribute - Referenced User Attribute' - If blank, the value of the attribute defined in 'Group Member Attribute'
                is expected to be the full dn of the user. If not blank, this property will define the attribute of the user ldap entry that
                the value of the attribute defined in 'Group Member Attribute' is referencing (i.e. uid). Use of this property requires that
                'User Search Base' is also configured. (i.e. member: cn=User 1,ou=users,o=nifi vs. memberUid: user1)
            NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the user identities.
                Group names are not mapped.
        -->
        <userGroupProvider>
            <identifier>ldap-user-group-provider</identifier>
            <class>org.apache.nifi.ldap.tenants.LdapUserGroupProvider</class>
            <property name="Authentication Strategy">SIMPLE</property>
            <property name="Manager DN">cn=admin,dc=example,dc=org</property>
            <property name="Manager Password">adminpassword</property>
            
            <property name="TLS - Keystore"></property>
            <property name="TLS - Keystore Password"></property>
            <property name="TLS - Keystore Type"></property>
            <property name="TLS - Truststore"></property>
            <property name="TLS - Truststore Password"></property>
            <property name="TLS - Truststore Type"></property>
            <property name="TLS - Client Auth"></property>
            <property name="TLS - Protocol"></property>
            <property name="TLS - Shutdown Gracefully"></property>
            
            <property name="Referral Strategy">IGNORE</property>
            <property name="Connect Timeout">10 secs</property>
            <property name="Read Timeout">10 secs</property>
            <property name="Url">ldap://openldap.bigdata.svc.cluster.local:1389</property>
            <property name="Page Size"></property>
            <property name="Sync Interval">30 mins</property>
            <property name="User Search Base">dc=example,dc=org</property>
            <property name="User Object Class">person</property>
            <property name="User Search Scope">ONE_LEVEL</property>
            <property name="User Search Filter">(objectClass=*)</property>
            <property name="User Identity Attribute"></property>
            <property name="User Group Name Attribute"></property>
            <property name="User Group Name Attribute - Referenced Group Attribute"></property>
            <property name="Group Search Base"></property>
            <property name="Group Object Class">group</property>
            <property name="Group Search Scope">ONE_LEVEL</property>
            <property name="Group Search Filter"></property>
            <property name="Group Name Attribute"></property>
            <property name="Group Member Attribute"></property>
            <property name="Group Member Attribute - Referenced User Attribute"></property>
        </userGroupProvider>
  
        <!--
            The CompositeUserGroupProvider will provide support for retrieving users and groups from multiple sources.
            - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
                each property must be unique, for example: "User Group Provider A", "User Group Provider B",
                "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"
                NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
                would need to be applied by the base implementation.
        -->
        <userGroupProvider>
            <identifier>composite-configurable-user-group-provider</identifier>
            <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
            <property name="Configurable User Group Provider">file-user-group-provider</property>
            <property name="User Group Provider 1">ldap-user-group-provider</property>
        </userGroupProvider>
  
        <!--
            The CompositeConfigurableUserGroupProvider will provide support for retrieving users and groups from multiple sources.
            Additionally, a single configurable user group provider is required. Users from the configurable user group provider
            are configurable, however users loaded from one of the User Group Provider [unique key] will not be.
            - Configurable User Group Provider - A configurable user group provider.
            - User Group Provider [unique key] - The identifier of user group providers to load from. The name of
                each property must be unique, for example: "User Group Provider A", "User Group Provider B",
                "User Group Provider C" or "User Group Provider 1", "User Group Provider 2", "User Group Provider 3"
                NOTE: Any identity mapping rules specified in nifi.properties are not applied in this implementation. This behavior
                would need to be applied by the base implementation.
        -->
        <!-- To enable the composite-configurable-user-group-provider remove 2 lines. This is 1 of 2.
        <userGroupProvider>
            <identifier>composite-configurable-user-group-provider</identifier>
            <class>org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider</class>
            <property name="Configurable User Group Provider">file-user-group-provider</property>
            <property name="User Group Provider 1"></property>
        </userGroupProvider>
        To enable the composite-configurable-user-group-provider remove 2 lines. This is 2 of 2. -->
  
        <!--
            The FileAccessPolicyProvider will provide support for managing access policies which is backed by a file
            on the local file system.
            - User Group Provider - The identifier for an User Group Provider defined above that will be used to access
                users and groups for use in the managed access policies.
            - Authorizations File - The file where the FileAccessPolicyProvider will store policies.
            - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
                given the ability to create additional users, groups, and policies. The value of this property could be
                a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
                are no other policies defined. If this property is specified then a Legacy Authorized Users File can not be specified.
                NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
                so the value should be the unmapped identity. This identity must be found in the configured User Group Provider.
            - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
                converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
                not be specified, and this property will only be used when there are no other users, groups, and policies defined.
                NOTE: Any users in the legacy users file must be found in the configured User Group Provider.
            - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
                should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
                The name of each property must be unique, for example for a three node cluster:
                "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"
                NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
                so the values should be the unmapped identities (i.e. full DN from a certificate). This identity must be found
                in the configured User Group Provider.
        -->
        <accessPolicyProvider>
            <identifier>file-access-policy-provider</identifier>
            <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
            <property name="User Group Provider">file-user-group-provider</property>
            <property name="Authorizations File">../auth-conf/authorizations.xml</property>
            <property name="Initial Admin Identity">cn=admin,dc=example,dc=org</property>
            <property name="Legacy Authorized Users File"></property>
            <property name="Node Identity 0">CN=nifi-0.nifi-headless.default.svc.cluster.local, OU=NIFI</property>
            <property name="Node Identity 1">CN=nifi-1.nifi-headless.default.svc.cluster.local, OU=NIFI</property>
            <property name="Node Identity"></property>
        </accessPolicyProvider>
         <!--
            The StandardManagedAuthorizer. This authorizer implementation must be configured with the
            Access Policy Provider which it will use to access and manage users, groups, and policies.
            These users, groups, and policies will be used to make all access decisions during authorization
            requests.
            - Access Policy Provider - The identifier for an Access Policy Provider defined above.
        -->
        <authorizer>
            <identifier>managed-authorizer</identifier>
            <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
            <property name="Access Policy Provider">file-access-policy-provider</property>
        </authorizer>
        <!--
            NOTE: This Authorizer has been replaced with the more granular approach configured above with the Standard
            Managed Authorizer. However, it is still available for backwards compatibility reasons.
            The FileAuthorizer is NiFi's provided authorizer and has the following properties:
            - Authorizations File - The file where the FileAuthorizer will store policies.
            - Users File - The file where the FileAuthorizer will store users and groups.
            - Initial Admin Identity - The identity of an initial admin user that will be granted access to the UI and
                given the ability to create additional users, groups, and policies. The value of this property could be
                a DN when using certificates or LDAP, or a Kerberos principal. This property will only be used when there
                are no other users, groups, and policies defined. If this property is specified then a Legacy Authorized
                Users File can not be specified.
                NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the initial admin identity,
                so the value should be the unmapped identity.
            - Legacy Authorized Users File - The full path to an existing authorized-users.xml that will be automatically
                converted to the new authorizations model. If this property is specified then an Initial Admin Identity can
                not be specified, and this property will only be used when there are no other users, groups, and policies defined.
            - Node Identity [unique key] - The identity of a NiFi cluster node. When clustered, a property for each node
                should be defined, so that every node knows about every other node. If not clustered these properties can be ignored.
                The name of each property must be unique, for example for a three node cluster:
                "Node Identity A", "Node Identity B", "Node Identity C" or "Node Identity 1", "Node Identity 2", "Node Identity 3"
                NOTE: Any identity mapping rules specified in nifi.properties will also be applied to the node identities,
                so the values should be the unmapped identities (i.e. full DN from a certificate).
        -->
        <authorizer>
            <identifier>file-provider</identifier>
            <class>org.apache.nifi.authorization.FileAuthorizer</class>
            <property name="Authorizations File">../auth-conf/authorizations.xml</property>
            <property name="Users File">../auth-conf/users.xml</property>
            <property name="Initial Admin Identity">cn=admin,dc=example,dc=org</property>
            <property name="Legacy Authorized Users File"></property>
  
        </authorizer>
    </authorizers>
  bootstrap-notification-services.xml: "<?xml version=\"1.0\"?>\n<!--\n  Licensed to
    the Apache Software Foundation (ASF) under one or more\n  contributor license agreements.
    \ See the NOTICE file distributed with\n  this work for additional information regarding
    copyright ownership.\n  The ASF licenses this file to You under the Apache License,
    Version 2.0\n  (the \"License\"); you may not use this file except in compliance
    with\n  the License.  You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n
    \ Unless required by applicable law or agreed to in writing, software\n  distributed
    under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific
    language governing permissions and\n  limitations under the License.\n-->\n<services>\n
    \   <!-- This file is used to define how interested parties are notified when events
    in NiFi's lifecycle occur. -->\n    <!-- The format of this file is:\n        <services>\n
    \           <service>\n                <id>service-identifier</id>\n                <class>org.apache.nifi.notifications.DesiredNotificationService</class>\n
    \               <property name=\"property name\">property value</property>\n                <property
    name=\"another property\">another property value</property>\n            </service>\n
    \       </services>\n        \n        This file can contain 0 to many different
    service definitions.\n        The id can then be referenced from the bootstrap.conf
    file in order to configure the notification service\n        to be used when particular
    lifecycle events occur.\n    -->\n    \n<!--\n     <service>\n        <id>email-notification</id>\n
    \       <class>org.apache.nifi.bootstrap.notification.email.EmailNotificationService</class>\n
    \       <property name=\"SMTP Hostname\"></property>\n        <property name=\"SMTP
    Port\"></property>\n        <property name=\"SMTP Username\"></property>\n        <property
    name=\"SMTP Password\"></property>\n        <property name=\"SMTP TLS\"></property>\n
    \       <property name=\"From\"></property>\n        <property name=\"To\"></property>\n
    \    </service>\n-->\n<!--\n     <service>\n        <id>http-notification</id>\n
    \       <class>org.apache.nifi.bootstrap.notification.http.HttpNotificationService</class>\n
    \       <property name=\"URL\"></property>\n     </service>\n-->\n</services>\n"
  bootstrap.conf: |-
    #
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #
  
    # Java command to use when running NiFi
    java=java
  
    # Username to use when running NiFi. This value will be ignored on Windows.
    run.as=
  
    # Preserve shell environment while runnning as "run.as" user
    preserve.environment=false
  
    # Configure where NiFi's lib and conf directories live
    lib.dir=./lib
    conf.dir=./conf
  
    # How long to wait after telling NiFi to shutdown before explicitly killing the Process
    graceful.shutdown.seconds=20
  
    # Disable JSR 199 so that we can use JSP's without running a JDK
    java.arg.1=-Dorg.apache.jasper.compiler.disablejsr199=true
  
    # JVM memory settings
    java.arg.2=-Xms2g
    java.arg.3=-Xmx2g
  
    # Enable Remote Debugging
    #java.arg.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000
  
    java.arg.4=-Djava.net.preferIPv4Stack=true
  
    # allowRestrictedHeaders is required for Cluster/Node communications to work properly
    java.arg.5=-Dsun.net.http.allowRestrictedHeaders=true
    java.arg.6=-Djava.protocol.handler.pkgs=sun.net.www.protocol
  
    # The G1GC is known to cause some problems in Java 8 and earlier, but the issues were addressed in Java 9. If using Java 8 or earlier,
    # it is recommended that G1GC not be used, especially in conjunction with the Write Ahead Provenance Repository. However, if using a newer
    # version of Java, it can result in better performance without significant "stop-the-world" delays.
    #java.arg.13=-XX:+UseG1GC
  
    #Set headless mode by default
    java.arg.14=-Djava.awt.headless=true
  
    # Root key in hexadecimal format for encrypted sensitive configuration values
    nifi.bootstrap.sensitive.key=
  
    # Sensitive Property Provider configuration
  
    # HashiCorp Vault Sensitive Property Providers
    #nifi.bootstrap.protection.hashicorp.vault.conf=./conf/bootstrap-hashicorp-vault.conf
  
    # AWS Sensitive Property Providers
    #nifi.bootstrap.protection.aws.conf=./conf/bootstrap-aws.conf
  
    # Azure Key Vault Sensitive Property Providers
    #nifi.bootstrap.protection.azure.keyvault.conf=./conf/bootstrap-azure.conf
  
    # GCP KMS Sensitive Property Providers
    #nifi.bootstrap.protection.gcp.kms.conf=./conf/bootstrap-gcp.conf
  
    # Sets the provider of SecureRandom to /dev/urandom to prevent blocking on VMs
    java.arg.15=-Djava.security.egd=file:/dev/urandom
  
    # Requires JAAS to use only the provided JAAS configuration to authenticate a Subject, without using any "fallback" methods (such as prompting for username/password)
    # Please see https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/single-signon.html, section "EXCEPTIONS TO THE MODEL"
    java.arg.16=-Djavax.security.auth.useSubjectCredsOnly=true
  
    # Zookeeper 3.5 now includes an Admin Server that starts on port 8080, since NiFi is already using that port disable by default.
    # Please see https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_adminserver_config for configuration options.
    java.arg.17=-Dzookeeper.admin.enableServer=false
  
    # The following options configure a Java Agent to handle native library loading.
    # It is needed when a custom jar (eg. JDBC driver) has been configured on a component in the flow and this custom jar depends on a native library
    # and tries to load it by its absolute path (java.lang.System.load(String filename) method call).
    # Use this Java Agent only if you get "Native Library ... already loaded in another classloader" errors otherwise!
    #java.arg.18=-javaagent:./lib/aspectj/aspectjweaver-1.9.6.jar
    #java.arg.19=-Daj.weaving.loadersToSkip=sun.misc.Launcher$AppClassLoader,jdk.internal.loader.ClassLoaders$AppClassLoader,org.eclipse.jetty.webapp.WebAppClassLoader,\
    #            org.apache.jasper.servlet.JasperLoader,org.jvnet.hk2.internal.DelegatingClassLoader,org.apache.nifi.nar.NarClassLoader
    # End of Java Agent config for native library loading.
  
    ###
    # Notification Services for notifying interested parties when NiFi is stopped, started, dies
    ###
  
    # XML File that contains the definitions of the notification services
    notification.services.file=./conf/bootstrap-notification-services.xml
  
    # In the case that we are unable to send a notification for an event, how many times should we retry?
    notification.max.attempts=5
  
    # Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is started?
    #nifi.start.notification.services=email-notification
  
    # Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is stopped?
    #nifi.stop.notification.services=email-notification
  
    # Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi dies?
    #nifi.dead.notification.services=email-notification
  
    # The first curator connection issue is logged as ERROR, for example when NiFi cannot connect to one of the Zookeeper nodes.
    # Additional connection issues are logged as DEBUG until the connection is restored.
    java.arg.curator.supress.excessive.logs=-Dcurator-log-only-first-connection-issue-as-error-level=true
  login-identity-providers-ldap.xml: "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!--\n
    \ Licensed to the Apache Software Foundation (ASF) under one or more\n  contributor
    license agreements.  See the NOTICE file distributed with\n  this work for additional
    information regarding copyright ownership.\n  The ASF licenses this file to You
    under the Apache License, Version 2.0\n  (the \"License\"); you may not use this
    file except in compliance with\n  the License.  You may obtain a copy of the License
    at\n      http://www.apache.org/licenses/LICENSE-2.0\n  Unless required by applicable
    law or agreed to in writing, software\n  distributed under the License is distributed
    on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
    or implied.\n  See the License for the specific language governing permissions and\n
    \ limitations under the License.\n-->\n<!--\n    This file lists the login identity
    providers to use when running securely. In order\n    to use a specific provider
    it must be configured here and it's identifier\n    must be specified in the nifi.properties
    file.\n-->\n<loginIdentityProviders>\n    <!--\n        Identity Provider for users
    logging in with username/password against an LDAP server.\n        \n        'Authentication
    Strategy' - How the connection to the LDAP server is authenticated. Possible\n            values
    are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.\n        \n        'Manager DN' - The
    DN of the manager that is used to bind to the LDAP server to search for users.\n
    \       'Manager Password' - The password of the manager that is used to bind to
    the LDAP server to\n            search for users.\n            \n        'TLS -
    Keystore' - Path to the Keystore that is used when connecting to LDAP using LDAPS
    or START_TLS.\n        'TLS - Keystore Password' - Password for the Keystore that
    is used when connecting to LDAP\n            using LDAPS or START_TLS.\n        'TLS
    - Keystore Type' - Type of the Keystore that is used when connecting to LDAP using\n
    \           LDAPS or START_TLS (i.e. JKS or PKCS12).\n        'TLS - Truststore'
    - Path to the Truststore that is used when connecting to LDAP using LDAPS or START_TLS.\n
    \       'TLS - Truststore Password' - Password for the Truststore that is used when
    connecting to\n            LDAP using LDAPS or START_TLS.\n        'TLS - Truststore
    Type' - Type of the Truststore that is used when connecting to LDAP using\n            LDAPS
    or START_TLS (i.e. JKS or PKCS12).\n        'TLS - Client Auth' - Client authentication
    policy when connecting to LDAP using LDAPS or START_TLS.\n            Possible values
    are REQUIRED, WANT, NONE.\n        'TLS - Protocol' - Protocol to use when connecting
    to LDAP using LDAPS or START_TLS. (i.e. TLS,\n            TLSv1.1, TLSv1.2, etc).\n
    \       'TLS - Shutdown Gracefully' - Specifies whether the TLS should be shut down
    gracefully \n            before the target context is closed. Defaults to false.\n
    \           \n        'Referral Strategy' - Strategy for handling referrals. Possible
    values are FOLLOW, IGNORE, THROW.\n        'Connect Timeout' - Duration of connect
    timeout. (i.e. 10 secs).\n        'Read Timeout' - Duration of read timeout. (i.e.
    10 secs).\n       \n        'Url' - Space-separated list of URLs of the LDAP servers
    (i.e. ldap://<hostname>:<port>).\n        'User Search Base' - Base DN for searching
    for users (i.e. CN=Users,DC=example,DC=com).\n        'User Search Filter' - Filter
    for searching for users against the 'User Search Base'.\n            (i.e. sAMAccountName={0}).
    The user specified name is inserted into '{0}'.\n        'Identity Strategy' - Strategy
    to identify users. Possible values are USE_DN and USE_USERNAME.\n            The
    default functionality if this property is missing is USE_DN in order to retain\n
    \           backward compatibility. USE_DN will use the full DN of the user entry
    if possible.\n            USE_USERNAME will use the username the user logged in
    with.\n        'Authentication Expiration' - The duration of how long the user authentication
    is valid\n            for. If the user never logs out, they will be required to
    log back in following\n            this duration.\n    -->\n    <provider>\n        <identifier>ldap-provider</identifier>\n
    \       <class>org.apache.nifi.ldap.LdapProvider</class>\n        <property name=\"Authentication
    Strategy\">SIMPLE</property>\n        <property name=\"Manager DN\">cn=admin,dc=example,dc=org</property>\n
    \       <property name=\"Manager Password\">adminpassword</property>
    \       \n        \n        <property name=\"TLS - Keystore\"></property>\n        <property
    name=\"TLS - Keystore Password\"></property>\n        <property name=\"TLS - Keystore
    Type\"></property>\n        <property name=\"TLS - Truststore\"></property>\n        <property
    name=\"TLS - Truststore Password\"></property>\n        <property name=\"TLS - Truststore
    Type\"></property>\n        <property name=\"TLS - Client Auth\"></property>\n        <property
    name=\"TLS - Protocol\"></property>\n        <property name=\"TLS - Shutdown Gracefully\"></property>\n
    \       \n        <property name=\"Referral Strategy\">FOLLOW</property>\n
    \       <property name=\"Connect Timeout\">10 secs</property>\n        <property
    name=\"Read Timeout\">10 secs</property>\n        <property name=\"Url\">ldap://openldap.bigdata.svc.cluster.local:1389</property>\n
    \       <property name=\"User Search Base\">dc=example,dc=org</property>\n
    \       <property name=\"User Search Filter\">(cn={0})</property>\n        <property
    name=\"Identity Strategy\">USE_USERNAME</property>\n        <property
    name=\"Authentication Expiration\">12 hours</property>\n    </provider>\n</loginIdentityProviders>"
  nifi.properties: |
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
  
    # Core Properties #
    nifi.flow.configuration.file=../data/flow.xml.gz
    nifi.flow.configuration.archive.enabled=true
    nifi.flow.configuration.archive.dir=../data/archive/
    nifi.flow.configuration.archive.max.time=30 days
    nifi.flow.configuration.archive.max.storage=500 MB
    nifi.flow.configuration.archive.max.count=
    nifi.flowcontroller.autoResumeState=true
    nifi.flowcontroller.graceful.shutdown.period=10 sec
    nifi.flowservice.writedelay.interval=500 ms
    nifi.administrative.yield.duration=30 sec
    # If a component has no work to do (is "bored"), how long should we wait before checking again for work?
    nifi.bored.yield.duration=10 millis
    nifi.queue.backpressure.count=10000
    nifi.queue.backpressure.size=1 GB
  
    nifi.authorizer.configuration.file=./conf/authorizers.xml
    nifi.login.identity.provider.configuration.file=./conf/login-identity-providers.xml
    nifi.templates.directory=../data/templates
    nifi.ui.banner.text=
    nifi.ui.autorefresh.interval=30 sec
    nifi.nar.library.directory=./lib
    nifi.nar.library.directory.custom=
    nifi.nar.library.autoload.directory=./extensions
    nifi.nar.working.directory=./work/nar/
    nifi.documentation.working.directory=./work/docs/components
  
    ####################
    # State Management #
    ####################
    nifi.state.management.configuration.file=./conf/state-management.xml
    # The ID of the local state provider
    nifi.state.management.provider.local=local-provider
    # The ID of the cluster-wide state provider. This will be ignored if NiFi is not clustered but must be populated if running in a cluster.
    nifi.state.management.provider.cluster=zk-provider
    # Specifies whether or not this instance of NiFi should run an embedded ZooKeeper server
    nifi.state.management.embedded.zookeeper.start=false
    # Properties file that provides the ZooKeeper properties to use if <nifi.state.management.embedded.zookeeper.start> is set to true
    nifi.state.management.embedded.zookeeper.properties=./conf/zookeeper.properties
  
    # H2 Settings
    nifi.database.directory=../data/database_repository
    nifi.h2.url.append=;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE
  
    # Repository Encryption properties override individual repository implementation properties
    nifi.repository.encryption.protocol.version=
    nifi.repository.encryption.key.id=
    nifi.repository.encryption.key.provider=
    nifi.repository.encryption.key.provider.keystore.location=
    nifi.repository.encryption.key.provider.keystore.password=
  
    # FlowFile Repository
    nifi.flowfile.repository.implementation=org.apache.nifi.controller.repository.WriteAheadFlowFileRepository
    nifi.flowfile.repository.wal.implementation=org.apache.nifi.wali.SequentialAccessWriteAheadLog
    nifi.flowfile.repository.directory=../flowfile_repository
    nifi.flowfile.repository.checkpoint.interval=20 secs
    nifi.flowfile.repository.always.sync=false
    nifi.flowfile.repository.retain.orphaned.flowfiles=true
  
    nifi.swap.manager.implementation=org.apache.nifi.controller.FileSystemSwapManager
    nifi.queue.swap.threshold=20000
  
    # Content Repository
    nifi.content.repository.implementation=org.apache.nifi.controller.repository.FileSystemRepository
    nifi.content.claim.max.appendable.size=1 MB
    nifi.content.repository.directory.default=../content_repository
    nifi.content.repository.archive.max.retention.period=7 days
    nifi.content.repository.archive.max.usage.percentage=50%
    nifi.content.repository.archive.enabled=true
    nifi.content.repository.always.sync=false
    nifi.content.viewer.url=../nifi-content-viewer/
  
    # Provenance Repository Properties
    nifi.provenance.repository.implementation=org.apache.nifi.provenance.WriteAheadProvenanceRepository
  
    # Persistent Provenance Repository Properties
    nifi.provenance.repository.directory.default=../provenance_repository
    nifi.provenance.repository.max.storage.time=3 days
    nifi.provenance.repository.max.storage.size=8 GB
    nifi.provenance.repository.rollover.time=10 mins
    nifi.provenance.repository.rollover.size=100 MB
    nifi.provenance.repository.query.threads=2
    nifi.provenance.repository.index.threads=2
    nifi.provenance.repository.compress.on.rollover=true
    nifi.provenance.repository.always.sync=false
    # Comma-separated list of fields. Fields that are not indexed will not be searchable. Valid fields are:
    # EventType, FlowFileUUID, Filename, TransitURI, ProcessorID, AlternateIdentifierURI, Relationship, Details
    nifi.provenance.repository.indexed.fields=EventType, FlowFileUUID, Filename, ProcessorID, Relationship
    # FlowFile Attributes that should be indexed and made searchable.  Some examples to consider are filename, uuid, mime.type
    nifi.provenance.repository.indexed.attributes=
    # Large values for the shard size will result in more Java heap usage when searching the Provenance Repository
    # but should provide better performance
    nifi.provenance.repository.index.shard.size=500 MB
    # Indicates the maximum length that a FlowFile attribute can be when retrieving a Provenance Event from
    # the repository. If the length of any attribute exceeds this value, it will be truncated when the event is retrieved.
    nifi.provenance.repository.max.attribute.length=65536
    nifi.provenance.repository.concurrent.merge.threads=2
  
  
    # Volatile Provenance Respository Properties
    nifi.provenance.repository.buffer.size=100000
  
    # Component and Node Status History Repository
    nifi.components.status.repository.implementation=org.apache.nifi.controller.status.history.VolatileComponentStatusRepository
  
    # Volatile Status History Repository Properties
    nifi.components.status.repository.buffer.size=1440
    nifi.components.status.snapshot.frequency=1 min
  
    # QuestDB Status History Repository Properties
    nifi.status.repository.questdb.persist.node.days=14
    nifi.status.repository.questdb.persist.component.days=3
    nifi.status.repository.questdb.persist.location=./status_repository
  
    # Site to Site properties
    nifi.remote.input.host=
    nifi.remote.input.secure=true
    nifi.remote.input.socket.port=10000
    nifi.remote.input.http.enabled=true
    nifi.remote.input.http.transaction.ttl=30 sec
    nifi.remote.contents.cache.expiration=30 secs
  
    # web properties #
    #############################################
  
    # For security, NiFi will present the UI on 127.0.0.1 and only be accessible through this loopback interface.
    # Be aware that changing these properties may affect how your instance can be accessed without any restriction.
    # We recommend configuring HTTPS instead. The administrators guide provides instructions on how to do this.
  
    nifi.web.http.host=
    nifi.web.http.port=
    nifi.web.http.network.interface.default=
  
    #############################################
  
    nifi.web.https.host=
    nifi.web.https.port=8443
    nifi.web.https.network.interface.default=eth0
    nifi.web.https.network.interface.lo=lo
    nifi.web.jetty.working.directory=./work/jetty
    nifi.web.jetty.threads=200
    nifi.web.max.header.size=16 KB
    nifi.web.proxy.context.path=
    nifi.web.proxy.host=192.168.49.2:30029
    nifi.web.max.content.size=
    nifi.web.max.requests.per.second=30000
    nifi.web.max.access.token.requests.per.second=25
    nifi.web.request.timeout=60 secs
    nifi.web.request.ip.whitelist=
    nifi.web.should.send.server.version=true
  
    # Include or Exclude TLS Cipher Suites for HTTPS
    nifi.web.https.ciphersuites.include=
    nifi.web.https.ciphersuites.exclude=
  
    # security properties #
    nifi.sensitive.props.key=changeMechangeMe
    nifi.sensitive.props.key.protected=
    nifi.sensitive.props.algorithm=NIFI_PBKDF2_AES_GCM_256
    nifi.sensitive.props.additional.keys=
  
    nifi.security.autoreload.enabled=false
    nifi.security.autoreload.interval=10 secs
  
    
    nifi.security.keystore=/opt/nifi/nifi-current/conf/keystore.jks
    nifi.security.keystoreType=jks
    nifi.security.keystorePasswd=
    nifi.security.keyPasswd=
    nifi.security.truststore=/opt/nifi/nifi-current/conf/truststore.jks
    nifi.security.truststoreType=jks
    nifi.security.truststorePasswd=
    proxiedEntity=cn=admin,dc=example,dc=org
    nifi.security.user.authorizer=file-provider
    nifi.security.user.login.identity.provider=ldap-provider
    
  
    
  
    # Apache Knox SSO Properties #
    nifi.security.user.knox.url=
    nifi.security.user.knox.publicKey=
    nifi.security.user.knox.cookieName=hadoop-jwt
    nifi.security.user.knox.audiences=
  
    # SAML Properties #
    nifi.security.user.saml.idp.metadata.url=
    nifi.security.user.saml.sp.entity.id=
    nifi.security.user.saml.identity.attribute.name=
    nifi.security.user.saml.group.attribute.name=
    nifi.security.user.saml.metadata.signing.enabled=false
    nifi.security.user.saml.request.signing.enabled=false
    nifi.security.user.saml.want.assertions.signed=true
    nifi.security.user.saml.signature.algorithm=http://www.w3.org/2001/04/xmldsig-more#rsa-sha256
    nifi.security.user.saml.signature.digest.algorithm=http://www.w3.org/2001/04/xmlenc#sha256
    nifi.security.user.saml.message.logging.enabled=false
    nifi.security.user.saml.authentication.expiration=12 hours
    nifi.security.user.saml.single.logout.enabled=false
    nifi.security.user.saml.http.client.truststore.strategy=JDK
    nifi.security.user.saml.http.client.connect.timeout=30 secs
    nifi.security.user.saml.http.client.read.timeout=30 secs
  
    # Identity Mapping Properties #
    # These properties allow normalizing user identities such that identities coming from different identity providers
    # (certificates, LDAP, Kerberos) can be treated the same internally in NiFi. The following example demonstrates normalizing
    # DNs from certificates and principals from Kerberos into a common identity string:
    #
    # nifi.security.identity.mapping.pattern.dn=^CN=(.*?), OU=(.*?), O=(.*?), L=(.*?), ST=(.*?), C=(.*?)$
    # nifi.security.identity.mapping.value.dn=$1@$2
    # nifi.security.identity.mapping.transform.dn=NONE
    # nifi.security.identity.mapping.pattern.kerb=^(.*?)/instance@(.*?)$
    # nifi.security.identity.mapping.value.kerb=$1@$2
    # nifi.security.identity.mapping.transform.kerb=UPPER
  
    # Group Mapping Properties #
    # These properties allow normalizing group names coming from external sources like LDAP. The following example
    # lowercases any group name.
    #
    # nifi.security.group.mapping.pattern.anygroup=^(.*)$
    # nifi.security.group.mapping.value.anygroup=$1
    # nifi.security.group.mapping.transform.anygroup=LOWER
  
    # cluster common properties (all nodes must have same values) #
    nifi.cluster.protocol.heartbeat.interval=5 sec
    nifi.cluster.protocol.heartbeat.missable.max=8
    nifi.cluster.protocol.is.secure=true
  
    # cluster node properties (only configure for cluster nodes) #
    nifi.cluster.is.node=true
    nifi.cluster.node.address=
    nifi.cluster.node.protocol.port=6007
    nifi.cluster.node.protocol.max.threads=50
    nifi.cluster.node.event.history.size=25
    nifi.cluster.node.connection.timeout=5 sec
    nifi.cluster.node.read.timeout=5 sec
    nifi.cluster.node.max.concurrent.requests=100
    nifi.cluster.firewall.file=
    nifi.cluster.flow.election.max.wait.time=1 mins
    nifi.cluster.flow.election.max.candidates=
  
    # cluster load balancing properties #
    nifi.cluster.load.balance.host=
    nifi.cluster.load.balance.port=6342
    nifi.cluster.load.balance.connections.per.node=1
    nifi.cluster.load.balance.max.thread.count=8
    nifi.cluster.load.balance.comms.timeout=30 sec
  
    # zookeeper properties, used for cluster management #
    nifi.zookeeper.connect.string=zookeeper-0.zookeeper-hs.bigdata.svc.cluster.local:2181
    nifi.zookeeper.connect.timeout=20 secs
    nifi.zookeeper.session.timeout=20 secs
    nifi.zookeeper.root.node=/nifi
    nifi.zookeeper.client.secure=false
    nifi.zookeeper.security.keystore=
    nifi.zookeeper.security.keystoreType=
    nifi.zookeeper.security.keystorePasswd=
    nifi.zookeeper.security.truststore=
    nifi.zookeeper.security.truststoreType=
    nifi.zookeeper.security.truststorePasswd=
    nifi.zookeeper.jute.maxbuffer=
  
    # Zookeeper properties for the authentication scheme used when creating acls on znodes used for cluster management
    # Values supported for nifi.zookeeper.auth.type are "default", which will apply world/anyone rights on znodes
    # and "sasl" which will give rights to the sasl/kerberos identity used to authenticate the nifi node
    # The identity is determined using the value in nifi.kerberos.service.principal and the removeHostFromPrincipal
    # and removeRealmFromPrincipal values (which should align with the kerberos.removeHostFromPrincipal and kerberos.removeRealmFromPrincipal
    # values configured on the zookeeper server).
    nifi.zookeeper.auth.type=
    nifi.zookeeper.kerberos.removeHostFromPrincipal=
    nifi.zookeeper.kerberos.removeRealmFromPrincipal=
  
    # kerberos #
    nifi.kerberos.krb5.file=
  
    # kerberos service principal #
    nifi.kerberos.service.principal=
    nifi.kerberos.service.keytab.location=
  
    # kerberos spnego principal #
    nifi.kerberos.spnego.principal=
    nifi.kerberos.spnego.keytab.location=
    nifi.kerberos.spnego.authentication.expiration=12 hours
  
    # external properties files for variable registry
    # supports a comma delimited list of file locations
    nifi.variable.registry.properties=
  
    # analytics properties #
    nifi.analytics.predict.enabled=false
    nifi.analytics.predict.interval=3 mins
    nifi.analytics.query.interval=5 mins
    nifi.analytics.connection.model.implementation=org.apache.nifi.controller.status.analytics.models.OrdinaryLeastSquares
    nifi.analytics.connection.model.score.name=rSquared
    nifi.analytics.connection.model.score.threshold=.90
  
    # runtime monitoring properties
    nifi.monitor.long.running.task.schedule=
    nifi.monitor.long.running.task.threshold=
  
    # Create automatic diagnostics when stopping/restarting NiFi.
  
    # Enable automatic diagnostic at shutdown.
    nifi.diagnostics.on.shutdown.enabled=false
  
    # Include verbose diagnostic information.
    nifi.diagnostics.on.shutdown.verbose=false
  
    # The location of the diagnostics folder.
    nifi.diagnostics.on.shutdown.directory=./diagnostics
  
    # The maximum number of files permitted in the directory. If the limit is exceeded, the oldest files are deleted.
    nifi.diagnostics.on.shutdown.max.filecount=10
  
    # The diagnostics folder's maximum permitted size in bytes. If the limit is exceeded, the oldest files are deleted.
    nifi.diagnostics.on.shutdown.max.directory.size=10 MB
  startup.sh: |-
    #!/bin/sh -e
  
    prop_replace () {
        target_file=${NIFI_HOME}/conf/${3:-nifi.properties}
        echo "updating ${1} in ${target_file}"
        if egrep "^${1}=" ${target_file} &> /dev/null; then
            sed -i -e "s|^$1=.*$|$1=$2|"  ${target_file}
        else
            echo ${1}=${2} >> ${target_file}
        fi
    }
  
    mkdir -p ${NIFI_HOME}/config-data/conf
    FQDN=$(hostname -f)
  
    cat "${NIFI_HOME}/conf/nifi.temp" > "${NIFI_HOME}/conf/nifi.properties"
    cat "${NIFI_HOME}/conf/authorizers.temp" > "${NIFI_HOME}/conf/authorizers.xml"
    cat "${NIFI_HOME}/conf/login-identity-providers-ldap.xml" > "${NIFI_HOME}/conf/login-identity-providers.xml"
  
    prop_replace nifi.remote.input.host ${FQDN}
    prop_replace nifi.cluster.node.address ${FQDN}
    prop_replace nifi.web.https.host ${FQDN}
    # Update nifi.properties for web ui proxy hostname
    prop_replace nifi.web.proxy.host 192.168.49.2:30029
  
    # Run the tls-toolkit in client mode to generate the truststore and keystore
    /opt/nifi/nifi-toolkit-current/bin/tls-toolkit.sh client -c nifi-ca -t 12345678912345678912 --dn "CN=$(hostname -f), OU=${OU:-NIFI}" -p 9090
  
    # Use jq to extract the passwords form the config.json generated by the tls-toolkit
    KEYSTORE_PASSWORD=`jq -r '.keyStorePassword' ./config.json`
    KEY_PASSWORD=`jq -r '.keyPassword' ./config.json`
    TRUSTSTORE_PASSWORD=`jq -r '.trustStorePassword' ./config.json`
  
    mv ./keystore.jks conf/
    mv ./truststore.jks conf/
  
    # Perform idempotent changes of configuration to support secure environments
    echo 'Configuring environment with SSL settings'
  
    export nifi_props_file=/${NIFI_HOME}/conf/nifi.properties
  
    prop_replace 'nifi.security.keystorePasswd'     "${KEYSTORE_PASSWORD}"
    prop_replace 'nifi.security.keyPasswd'          "${KEY_PASSWORD:-$KEYSTORE_PASSWORD}"
    prop_replace 'nifi.security.truststorePasswd'   "${TRUSTSTORE_PASSWORD}"
  
    # Continuously provide logs so that 'docker logs' can produce them
    "${NIFI_HOME}/bin/nifi.sh" run &
    nifi_pid="$!"
    tail -F --pid=${nifi_pid} "${NIFI_HOME}/logs/nifi-app.log" &
  
    trap 'echo Received trapped signal, beginning shutdown...;./bin/nifi.sh stop;exit 0;' TERM HUP INT;
    trap ":" EXIT
  
    echo NiFi running with PID ${nifi_pid}.
    wait ${nifi_pid}
  state-management.xml: |+
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
  
    <stateManagement>
  
        <local-provider>
            <id>local-provider</id>
            <class>org.apache.nifi.controller.state.providers.local.WriteAheadLocalStateProvider</class>
            <property name="Directory">./state/local</property>
            <property name="Always Sync">false</property>
            <property name="Partitions">16</property>
            <property name="Checkpoint Interval">2 mins</property>
        </local-provider>
  
        <cluster-provider>
            <id>zk-provider</id>
            <class>org.apache.nifi.controller.state.providers.zookeeper.ZooKeeperStateProvider</class>
            <property name="Connect String">zookeeper-0.zookeeper-hs.bigdata.svc.cluster.local:2181</property>
            <property name="Root Node">/nifi</property>
            <property name="Session Timeout">10 seconds</property>
            <property name="Access Control">Open</property>
        </cluster-provider>
  
  
  
    </stateManagement>
  
  zookeeper.properties: |+
    #
    #
    # Licensed to the Apache Software Foundation (ASF) under one
    # or more contributor license agreements.  See the NOTICE file
    # distributed with this work for additional information
    # regarding copyright ownership.  The ASF licenses this file
    # to you under the Apache License, Version 2.0 (the
    # "License"); you may not use this file except in compliance
    # with the License.  You may obtain a copy of the License at
    #
    #   http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing,
    # software distributed under the License is distributed on an
    # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    # KIND, either express or implied.  See the License for the
    # specific language governing permissions and limitations
    # under the License.
    #
    #
    #
  
    initLimit=10
    autopurge.purgeInterval=24
    syncLimit=5
    tickTime=2000
    dataDir=./state/zookeeper
    autopurge.snapRetainCount=30
  
    #
    # Specifies the servers that are part of this zookeeper ensemble. For
    # every NiFi instance running an embedded zookeeper, there needs to be
    # a server entry below. For instance:
    #
    # server.1=nifi-node1-hostname:2888:3888;2181
    # server.2=nifi-node2-hostname:2888:3888;2181
    # server.3=nifi-node3-hostname:2888:3888;2181
    #
    # The index of the server corresponds to the myid file that gets created
    # in the dataDir of each node running an embedded zookeeper. See the
    # administration guide for more details.
    #
  
    server.1=
---
# Source: nifi/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nifi-headless
  labels:
    app: "nifi"
    chart: "nifi-1.0.4"
    release: "nifi"
    heritage: "Helm"
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 8443
    name: https
  - port: 6007
    name: cluster
  selector:
    app: "nifi"
    release: "nifi"
---
# Source: nifi/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nifi
  labels:
    app: "nifi"
    chart: "nifi-1.0.4"
    release: "nifi"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
    - port: 8443
      name: https
      targetPort: 8443
      nodePort: 
  selector:
    app: nifi
    release: nifi
---
# Source: nifi/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nifi
  labels:
    app: "nifi"
    chart: "nifi-1.0.4"
    release: "nifi"
    heritage: "Helm"
spec:
  podManagementPolicy: Parallel
  serviceName: nifi-headless
  replicas: 2
  selector:
    matchLabels:
      app: nifi
      release: nifi
  template:
    metadata:
      annotations:
        security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000
      labels:
        app: "nifi"
        chart: "nifi-1.0.4"
        release: "nifi"
        heritage: "Helm"
    spec:
      serviceAccountName: default
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                         - "nifi"
                 topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      initContainers:
      - name: zookeeper
        imagePullPolicy: "IfNotPresent"
        image: "busybox:latest"
        command:
        - sh
        - -c
        - |
          echo trying to contact zookeeper-0.zookeeper-hs.bigdata.svc.cluster.local 2181
          until nc -vzw 1 zookeeper-0.zookeeper-hs.bigdata.svc.cluster.local 2181; do
            echo "waiting for zookeeper..."
            sleep 2
          done
      containers:
      - name: server
        imagePullPolicy: "IfNotPresent"
        image: "kapkiai/nifi:1.15.2"
        command: ["bash", "/opt/nifi/scripts/startup.sh"]
        resources:
          limits:
            cpu: 2
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        - containerPort: 6007
          name: cluster
          protocol: TCP
        env:
        readinessProbe:
          initialDelaySeconds: 60
          periodSeconds: 20
          tcpSocket:
            port: 8443
        livenessProbe:
          initialDelaySeconds: 90
          periodSeconds: 60
          tcpSocket:
            port: 8443
        volumeMounts:
          - name: "logs"
            mountPath: /opt/nifi/nifi-current/logs
          - name: "data"
            mountPath: /opt/nifi/data
          - name: "auth-conf"
            mountPath: /opt/nifi/auth-conf/
          - name: "config-data"
            mountPath: /opt/nifi/nifi-current/config-data
          - name: "flowfile-repository"
            mountPath: /opt/nifi/flowfile_repository
          - name: "content-repository"
            mountPath: /opt/nifi/content_repository
          - name: "provenance-repository"
            mountPath: /opt/nifi/provenance_repository
          - name: "bootstrap-conf"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
            subPath: "bootstrap.conf"
          - name: "nifi-properties"
            mountPath: /opt/nifi/nifi-current/conf/nifi.temp
            subPath: "nifi.temp"
          - name: "authorizers-temp"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.temp
            subPath: "authorizers.temp"
          - name: "bootstrap-notification-services-xml"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
            subPath: "bootstrap-notification-services.xml"
          - name: "login-identity-providers-ldap-xml"
            mountPath: /opt/nifi/nifi-current/conf/login-identity-providers-ldap.xml
            subPath: "login-identity-providers-ldap.xml"
          - name: "state-management-xml"
            mountPath: /opt/nifi/nifi-current/conf/state-management.xml
            subPath: "state-management.xml"
          - name: "zookeeper-properties"
            mountPath: /opt/nifi/nifi-current/conf/zookeeper.properties
            subPath: "zookeeper.properties"
          - name: "startup"
            mountPath: /opt/nifi/scripts/startup.sh
            subPath: "startup.sh"
      - name: clean-logs
        imagePullPolicy: "IfNotPresent"
        image: "busybox:latest"
        args: [rm, -rf, /var/log/nifi-app.log]
        resources:
          limits:
            cpu: 100Mi
            memory: 100Mi
          requests:
            cpu: 50m
            memory: 50Mi
        volumeMounts:
        - name: logs
          mountPath: /var/log
      volumes:
      - name: "bootstrap-conf"
        configMap:
          name: nifi-config
          items:
            - key: "bootstrap.conf"
              path: "bootstrap.conf"
      - name: "nifi-properties"
        configMap:
          name: nifi-config
          items:
            - key: "nifi.properties"
              path: "nifi.temp"
      - name: "authorizers-temp"
        configMap:
          name: nifi-config
          items:
            - key: "authorizers.xml"
              path: "authorizers.temp"
      - name: "bootstrap-notification-services-xml"
        configMap:
          name: nifi-config
          items:
            - key: "bootstrap-notification-services.xml"
              path: "bootstrap-notification-services.xml"
      - name: "login-identity-providers-ldap-xml"
        configMap:
          name: nifi-config
          items:
            - key: "login-identity-providers-ldap.xml"
              path: "login-identity-providers-ldap.xml"
      - name: "state-management-xml"
        configMap:
          name: nifi-config
          items:
            - key: "state-management.xml"
              path: "state-management.xml"
      - name: "zookeeper-properties"
        configMap:
          name: nifi-config
          items:
            - key: "zookeeper.properties"
              path: "zookeeper.properties"
      - name: "startup"
        configMap:
          name: nifi-config
          defaultMode: 0777
          items:
            - key: "startup.sh"
              path: "startup.sh"
  volumeClaimTemplates:
    - metadata:
        name: logs
      spec:
        accessModes:
          - "ReadWriteMany"
        storageClassName: "standard"
        resources:
          requests:
            storage: 5Gi
    - metadata:
        name: "config-data"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "standard"
        resources:
          requests:
            storage: 100Mi
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteMany"
        storageClassName: "standard"
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: flowfile-repository
      spec:
        accessModes:
          - "ReadWriteMany"
        storageClassName: "standard"
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: content-repository
      spec:
        accessModes:
          - "ReadWriteMany"
        storageClassName: "standard"
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: provenance-repository
      spec:
        accessModes:
          - "ReadWriteMany"
        storageClassName: "standard"
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: auth-conf
      spec:
        accessModes:
          - "ReadWriteMany"
        storageClassName: "standard"
        resources:
          requests:
            storage: 100Mi
---
# Source: nifi/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nifi-ingress
  namespace: default
  labels:
    app: "nifi"
    chart: "nifi-1.0.4"
    release: "nifi"
    heritage: "Helm"
  annotations:
    ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/affinity-mode: persistent
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/session-cookie-name: nifi-cookie
spec:
  rules:
    - host: nifi.apache.com
      http:
        paths:
          - path: /
            backend:
              service: 
                name: nifi
                port:
                  number:  8443
            pathType: ImplementationSpecific
