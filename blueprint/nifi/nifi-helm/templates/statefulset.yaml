---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "apache-nifi.fullname" . }}
  labels:
    app: {{ include "apache-nifi.name" . | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  podManagementPolicy: {{ .Values.sts.podManagementPolicy }}
  serviceName: {{ template "apache-nifi.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "apache-nifi.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
{{- if .Values.sts.pod.annotations }}
      annotations:
{{ toYaml .Values.sts.pod.annotations | indent 8 }}
{{- else }}
      annotations:
        security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000
{{- end }}
      labels:
        app: {{ include "apache-nifi.name" . | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
{{- if .Values.extraLabels }}
{{ toYaml .Values.extraLabels | indent 8 }}
{{- end }}
    spec:
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
{{- end}}
{{- if .Values.sts.useHostNetwork }}
      hostNetwork: {{ .Values.sts.useHostNetwork }}
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
{{- if .Values.sts.hostAliases }}
      hostAliases:
{{ toYaml .Values.sts.hostAliases | indent 8 }}
{{- end }}
      serviceAccountName: {{.Values.serviceAccount }}
      {{- if eq .Values.sts.AntiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ include "apache-nifi.name" . | quote }}
              topologyKey: "kubernetes.io/hostname"
      {{- else if eq .Values.sts.AntiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                         - {{ include "apache-nifi.name" . | quote }}
                 topologyKey: "kubernetes.io/hostname"
      {{- end }}
{{- if and .Values.affinity (and (ne .Values.sts.AntiAffinity "hard") (ne .Values.sts.AntiAffinity "soft")) }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- end }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.securityContext }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
{{- end }}
      initContainers:
# {{- if .Values.properties.isNode }}
      # - name: zookeeper
        # imagePullPolicy: {{ .Values.sidecar.imagePullPolicy | default "Always" | quote }}
        # image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        # command:
        # - sh
        # - -c
        # - |
          # echo trying to contact {{ template "zookeeper.server" . }} {{ .Values.zookeeper.port }}
          # until nc -vzw 1 {{ template "zookeeper.server" . }} {{ .Values.zookeeper.port }}; do
            # echo "waiting for zookeeper..."
            # sleep 2
          # done
# {{- end }}

{{- range $key, $value := .Values.initContainers }}
      - name: {{ $key }}
{{ toYaml $value | indent 8 }}
{{- end }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
{{- if .Values.extraContainers }}
{{- toYaml .Values.extraContainers | nindent 6 }}
{{- end }}
      - name: nifi
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["bash", "/opt/nifi/scripts/startup.sh"]
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
{{- if .Values.metrics.prometheus.enabled }}
        - containerPort: {{ .Values.metrics.prometheus.port }}
          name: metrics
          protocol: TCP                  
{{- end }}
        - containerPort: {{ .Values.properties.httpsPort }}
{{- if .Values.sts.hostPort }}
          hostPort: {{ .Values.sts.hostPort }}
{{- end }}
          name: https
          protocol: TCP
        - containerPort: {{ .Values.properties.clusterPort }}
          name: cluster
          protocol: TCP
        env:
{{- if .Values.env }}
{{ toYaml .Values.env | indent 8 }}
{{- end }}
{{- if .Values.envFrom }}
        envFrom:
{{ toYaml .Values.envFrom | indent 8 }}
{{- end }}
{{- if .Values.postStart }}
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", {{ .Values.postStart | quote }}]
{{- end }}
{{- if not .Values.properties.isNode }}
        readinessProbe:
          initialDelaySeconds: 60
          periodSeconds: 20
          tcpSocket:
            port: {{ .Values.properties.httpsPort }}

        livenessProbe:
          initialDelaySeconds: 90
          periodSeconds: 60
          tcpSocket:
            port: {{ .Values.properties.httpsPort }}
{{- end }}
        volumeMounts:
          - name: "logs"
            mountPath: /opt/nifi/nifi-current/logs
          - name: "data"
            mountPath: /opt/nifi/data
          - name: "auth-conf"
            mountPath: /opt/nifi/auth-conf/
          # - name: "config-data"
            # mountPath: /opt/nifi/nifi-current/config-data
          # - name: "flowfile-repository"
            # mountPath: /opt/nifi/flowfile_repository
          # - name: "content-repository"
            # mountPath: /opt/nifi/content_repository
          # - name: "provenance-repository"
            # mountPath: /opt/nifi/provenance_repository
          - name: "bootstrap-conf"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
            subPath: "bootstrap.conf"
          - name: "nifi-properties"
            mountPath: /opt/nifi/nifi-current/conf/nifi.temp
            subPath: "nifi.temp"
          - name: "authorizers-temp"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.temp
            subPath: "authorizers.temp"
          - name: "bootstrap-notification-services-xml"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
            subPath: "bootstrap-notification-services.xml"
          - name: "login-identity-providers-ldap-xml"
            mountPath: /opt/nifi/nifi-current/conf/login-identity-providers-ldap.xml
            subPath: "login-identity-providers-ldap.xml"
          - name: "state-management-xml"
            mountPath: /opt/nifi/nifi-current/conf/state-management.xml
            subPath: "state-management.xml"
          - name: "zookeeper-properties"
            mountPath: /opt/nifi/nifi-current/conf/zookeeper.properties
            subPath: "zookeeper.properties"
          - name: "startup"
            mountPath: /opt/nifi/scripts/startup.sh
            subPath: "startup.sh"
          - name: {{ template "apache-nifi.fullname" . }}-cert
            mountPath: /opt/nifi/certs
          {{- range $secret := .Values.secrets }}
            {{- if $secret.mountPath }}
              {{- if $secret.keys }}
                {{- range $key := $secret.keys }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}/{{ $key }}
            subPath: {{ $key }}
            readOnly: true
                {{- end }}
              {{- else }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $secret.name }}
            mountPath: {{ $secret.mountPath }}
            readOnly: true
              {{- end }}
            {{- end }}
          {{- end }}
          {{- range $configmap := .Values.configmaps }}
            {{- if $configmap.mountPath }}
              {{- if $configmap.keys }}
                {{- range $key := $configmap.keys }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $configmap.name }}
            mountPath: {{ $configmap.mountPath }}/{{ $key }}
            subPath: {{ $key }}
            readOnly: true
                {{- end }}
              {{- else }}
          - name: {{ include "apache-nifi.fullname" $ }}-{{ $configmap.name }}
            mountPath: {{ $configmap.mountPath }}
            readOnly: true
              {{- end }}
            {{- end }}
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
{{ toYaml .Values.extraVolumeMounts | indent 10 }}
          {{- end }}
      - name: clean-logs
        imagePullPolicy: {{ .Values.sidecar.imagePullPolicy | default "Always" | quote }}
        image: "{{ .Values.sidecar.image }}:{{ .Values.sidecar.tag }}"
        command:
        - sh
        - -c
        - while true; do rm -rf /opt/nifi/nifi-current/logs/nifi-app*202*; sleep 20;
          done
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: logs
          mountPath: /opt/nifi/nifi-current/logs
      volumes:
      - name: {{ template "apache-nifi.fullname" . }}-cert
        secret:
          secretName: {{ template "apache-nifi.fullname" . }}-cert2
      - name: "bootstrap-conf"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap.conf"
              path: "bootstrap.conf"
      - name: "nifi-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "nifi.properties"
              path: "nifi.temp"
      - name: "authorizers-temp"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "authorizers.xml"
              path: "authorizers.temp"
      - name: "bootstrap-notification-services-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap-notification-services.xml"
              path: "bootstrap-notification-services.xml"
      - name: "login-identity-providers-ldap-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "login-identity-providers-ldap.xml"
              path: "login-identity-providers-ldap.xml"
      - name: "state-management-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "state-management.xml"
              path: "state-management.xml"
      - name: "zookeeper-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "zookeeper.properties"
              path: "zookeeper.properties"
      - name: "startup"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          defaultMode: 0777
          items:
            - key: "startup.sh"
              path: "startup.sh"
      {{- range .Values.secrets }}
      - name: {{ include "apache-nifi.fullname" $ }}-{{ .name }}
        secret:
          secretName: {{ .name }}
      {{- end }}
      {{- range .Values.configmaps }}
      - name: {{ include "apache-nifi.fullname" $ }}-{{ .name }}
        configMap:
          name: {{ .name }}
      {{- end }}
{{- if not .Values.persistence.enabled }}
      - name: config-data
        emptyDir: {}
      - name: auth-conf
        emptyDir: {}
      - name: data
        emptyDir: {}
      - name: flowfile-repository
        emptyDir: {}
      - name: content-repository
        emptyDir: {}
      - name: provenance-repository
        emptyDir: {}
 {{- end }}
      - name: logs
        emptyDir: {}
      # - name: ext-nar
        # emptyDir: {}
      # - name: ext-jar
        # emptyDir: {}
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 6 }}
{{- end }}
{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    # - metadata:
        # name: logs
      # spec:
        # accessModes:
        # {{- range .Values.persistence.accessModes }}
          # - {{ . | quote }}
        # {{- end }}
        # storageClassName: {{ .Values.persistence.storageClass | quote }}
        # resources:
          # requests:
            # storage: {{ .Values.persistence.logStorage.size }}
    # - metadata:
        # name: "config-data"
      # spec:
        # accessModes: 
        # {{- range .Values.persistence.accessModes }}
          # - {{ . | quote }}
        # {{- end }}
        # storageClassName: {{ .Values.persistence.storageClass | quote }}
        # resources:
          # requests:
            # storage: {{ .Values.persistence.configStorage.size }}
    - metadata:
        name: data
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.dataStorage.size }}
    # - metadata:
        # name: flowfile-repository
      # spec:
        # accessModes:
        # {{- range .Values.persistence.accessModes }}
          # - {{ . | quote }}
        # {{- end }}
        # storageClassName: {{ .Values.persistence.storageClass | quote }}
        # resources:
          # requests:
            # storage: {{ .Values.persistence.flowfileRepoStorage.size }}
    # - metadata:
        # name: content-repository
      # spec:
        # accessModes:
        # {{- range .Values.persistence.accessModes }}
          # - {{ . | quote }}
        # {{- end }}
        # storageClassName: {{ .Values.persistence.storageClass | quote }}
        # resources:
          # requests:
            # storage: {{ .Values.persistence.contentRepoStorage.size }}
    # - metadata:
        # name: provenance-repository
      # spec:
        # accessModes:
        # {{- range .Values.persistence.accessModes }}
          # - {{ . | quote }}
        # {{- end }}
        # storageClassName: {{ .Values.persistence.storageClass | quote }}
        # resources:
          # requests:
            # storage: {{ .Values.persistence.provenanceRepoStorage.size }}
    - metadata:
        name: auth-conf
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.authconfStorage.size }}
{{- end }}