# imagePullSecrets:
#  - name: my-repository-secret
image:
  repository: tchiotludo/akhq
  tag: "latest" # uses Chart.AppVersion by default

# custom annotations (example: for prometheus)
annotations: {}
  #prometheus.io/scrape: 'true'
  #prometheus.io/port: '8080'
  #prometheus.io/path: '/prometheus'

podAnnotations: {}

# custom labels
labels: {}
  # custom.label: 'true'

podLabels: {}

## You can put directly your configuration here... or add java opts or any other env vars
extraEnv: []
# - name: AKHQ_CONFIGURATION
#   value: |
#       akhq:
#         secrets:
#           docker-kafka-server:
#             properties:
#               bootstrap.servers: "kafka:9092"
# - name: JAVA_OPTS
#   value: "-Djavax.net.ssl.trustStore=/usr/local/openjdk-11/lib/security/cacerts -Djavax.net.ssl.trustStorePassword=password"
# - name: CLASSPATH
#   value: "/any/additional/jars/desired.jar:/go/here.jar"

## Or you can also use configmap for the configuration...
configuration:
  logger:
    levels:
      io.micronaut.configuration.security.ldap: DEBUG
      io.micronaut.configuration.security.basic.auth: DEBUG
    # root: DEBUG

  micronaut:
    security:
      enabled: true
      token:
        jwt:
          signatures:
            secret:
              generator:
                secret: 043a718774c572bd8a25adbeb1bfcd5c0256ae11cecf9f9c3f925d0e52beaf89

      endpoints:
        login:
          enabled: true
        logout:
          enabled: true
      # Ldap authenticaton configuration
      ldap:
        default:
          enabled: true
          context:
            server: 'ldap://10.3.108.11:389'
            managerDn: 'CN=Bigdata Service Account,OU=BigData Users,OU=Domain Users,DC=safaricomet,DC=net'
            managerPassword: 'lyOdmSBwCsZnD4dLnOAE'
          search:
            enabled: true
            filter: 'sAMAccountName={0}'
            base: "OU=BigData Users,OU=Domain Users,DC=safaricomet,DC=net"
          groups:
            enabled: true
            subtree: true
            base: "OU=BigData Users,OU=Domain Users,DC=safaricomet,DC=net" 
            filter: 'sAMAccountName={0}'
  akhq:
 
    server:
      access-log: # Access log configuration (optional)
        enabled: true # true by default
        name: org.akhq.log.access # Logger name
        format: "[Date: {}] [Duration: {} ms] [Url: {} {}] [Status: {}] [Ip: {}] [User: {}]" # Logger format
        levels: DEBUG

    # default kafka properties for each clients, available for admin / producer / consumer (optional)
    clients-defaults:
      consumer:
        properties:
          isolation.level: read_committed

    # list of kafka cluster available for akhq
    connections:
      dc1-cluster: # url friendly name for the cluster (letter, number, _, -, ... dot are not allowed here)
        properties: # standard kafka properties (optional)
          bootstrap.servers: "10.3.41.32:9094"
          sasl.jaas.config:  "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"cu5RAwn7tk18\";"
          security.protocol: SASL_PLAINTEXT
          sasl.mechanism: SCRAM-SHA-512
       
      dc2-cluster:
        properties:
          bootstrap.servers: "10.3.141.30:9094"
          security.protocol: SASL_PLAINTEXT
          sasl.mechanism: SCRAM-SHA-512
          sasl.jaas.config:  "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"admin\" password=\"nv6t5s8EuPJd\";"
      
    # Topic list display options (optional)
    topic:
      retention: 172800000 # default retention period when creating topic
      partition: 3 #  default number of partition when creating topic
      replication: 3 # default number of replicas when creating topic
      internal-regexps: # list of regexp to be considered as internal (internal topic can't be deleted or updated)
        - "^_.*$"
        - "^.*_schemas$"
        - "^.*connect-config$"
        - "^.*connect-offsets$1"
        - "^.*connect-status$"
      stream-regexps: # list of regexp to be considered as internal stream topic
        - "^.*-changelog$"
        - "^.*-repartition$"
        - "^.*-rekey$"
      skip-consumer-groups: false # Skip loading consumer group information when showing topics
      skip-last-record: false # Skip loading last record date information when showing topics
      show-all-consumer-groups: false # Expand list of consumer groups instead of showing one.
      # Retry options for topic operations
      retry:
        topic-exists: # Delay between retries when checking for existence of newly created topics. This is needed as it might take the kafka broker a few seconds to create new topics.
          delay: "3s"

    # Topic display data options (optional)
    topic-data:
      size: 50 # max record per page (default: 50)
      poll-timeout: 1000 # The time, in milliseconds, spent waiting in poll if data is not available in the buffer.
      kafka-max-message-length: 1000000 # Max message length allowed to send to UI when retrieving a list of records in bytes.

    # Ui Global Options (optional)
    ui-options:
      topic:
        default-view: ALL  # default list view (ALL, HIDE_INTERNAL, HIDE_INTERNAL_STREAM, HIDE_STREAM). Overrides default
        skip-consumer-groups: false # Skip loading consumer group information when showing topics. Overrides default
        skip-last-recorhttps://kafka.big-data1.safaricomet.net/ui/dc1-cluster/group?search=&page=1fault sort order (OLDEST, NEWEST) (default: OLDEST).  Overrides default

    # Auth & Roles (optional)
    security:
      default-group: no-roles
      
      groups:

        admin: # unique key
          name: admin # Group name
          roles:  # roles for the group
            - topic/read
            - topic/insert
            - topic/delete
            - topic/config/update
            - node/read
            - node/config/update
            - topic/data/read
            - topic/data/insert
            - topic/data/delete
            - group/read
            - group/delete
            - group/offsets/update
            - registry/read
            - registry/insert
            - registry/update
            - registry/delete
            - registry/version/delete
            - acls/read
            - connect/read
            - connect/insert
            - connect/update
            - connect/delete
            - connect/state/update
          attributes:
            # Regexp list to filter topic available for group
            topics-filter-regexp:
              - "test.*"
            # Regexp list to filter connect configs visible for group
            connects-filter-regexp:
              - "^test.*$"
            # Regexp list to filter consumer groups visible for group
            consumer-groups-filter-regexp:
              - "consumer.*"
       
        
        cvm:
            name: cvm # Group name
            roles:  # roles for the group
              - topic/read
              - topic/data/read
              - group/read
            attributes:
              topics-filter-regexp:
                - "cvm.*" # Individual topic
              consumer-groups-filter-regexp:
                - "cvm.*"
    
      
      basic-auth:
      - username: cvm
        password: a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3
        groups:
        - cvm

      - username: admin
        password: a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3
        groups:
        - admin
     
      
      ldap:
        default-group: no-roles
        groups:
          - name: group-ldap-1
            groups: # Akhq groups list
              - topic-reader
          - name: group-ldap-2
            groups:
              - admin
          
        users:
          - username: Kenneth.Kipkogei
            groups:
              - group-ldap-2 
              
          - username: Mathew.Kapkiai
            groups:
              - admin
              
          - username: Alphonce.Oniala
            groups:
              - admin               
    



##... and secret for connection information
existingSecrets: ""
# name of the existingSecret
secrets: {}
#  akhq:
#    connections:
#      my-cluster-plain-text:
#        properties:
#          bootstrap.servers: "kafka:9092"
#        schema-registry:
#          url: "http://schema-registry:8085"
#          type: "confluent"
#          basic-auth-username: basic-auth-user
#          basic-auth-password: basic-auth-pass
#        connect:
#          - name: "my-connect"
#            url: "http://connect:8083"
#            basic-auth-username: basic-auth-user
#            basic-auth-password: basic-auth-pass

kafkaSecrets: []
#Provide extra base64 encoded kubernetes secrets (keystore/truststore)

# Any extra volumes to define for the pod (like keystore/truststore)
extraVolumes: []

# Any extra volume mounts to define for the akhq container
extraVolumeMounts: []

# Specify ServiceAccount for pod
serviceAccountName: akhq
serviceAccount:
  create: true
  #annotations:
  #  eks.amazonaws.com/role-arn: arn:aws:iam::123456789000:role/iam-role-name-here

# Add your own init container or uncomment and modify the example.
initContainers: {}
#   create-keystore:
#     image: "openjdk:11-slim"
#     command: ['sh', '-c', 'keytool']
#     volumeMounts:
#      - mountPath: /tmp
#        name: certs

# Configure the Pod Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext: {}
  # runAsNonRoot: true
  # runAsUser: 1000

# Configure the Container Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext: {}
  # allowPrivilegeEscalation: false
  # privileged: false
  # capabilities:
  #   drop:
  #     - ALL
  # runAsNonRoot: true
  # runAsUser: 1001
  # readOnlyRootFilesystem: true

service:
  enabled: true
  type: ClusterIP
  port: 80
  httpNodePort: 32551
  labels: {}
  annotations:
    # cloud.google.com/load-balancer-type: "Internal"

ingress:
  enabled: false
  ingressClassName: ""
  annotations: 
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  paths:
    - /
  hosts:
    - kafka.big-data1.safaricomet.net
  tls: []
  #  - secretName: akhq-tls
  #    hosts:
  #      - akhq.demo.com

readinessProbe:
  prefix: "" # set same as `micronaut.server.context-path`

resources: 
  limits:
   cpu: 1000M
   memory: 1G
  requests:
   cpu: 100m
   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
