---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zookeeper.fullname" . }}
  labels:
    app: {{ template "zookeeper.name" . }}
    chart: {{ template "zookeeper.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: server
data:
    ok: |
      #!/bin/sh
      echo ruok | nc 127.0.0.1 ${1:-2181}

    ready: |
      #!/bin/sh
      echo ruok | nc 127.0.0.1 ${1:-2181}

    run: |
      #!/bin/bash


      set -a
      ROOT=$(echo /apache-zookeeper-*)

      ZK_USER=${ZK_USER:-"zookeeper"}
      ZK_LOG_LEVEL=${ZK_LOG_LEVEL:-"INFO"}
      ZK_DATA_DIR=${ZK_DATA_DIR:-"/data"}
      ZK_DATA_LOG_DIR=${ZK_DATA_LOG_DIR:-"/logs"}
      ZK_CONF_DIR=${ZK_CONF_DIR:-"/conf"}
      ZK_CLIENT_PORT=${ZK_CLIENT_PORT:-2181}
      ZK_SERVER_PORT=${ZK_SERVER_PORT:-2888}
      ZK_ELECTION_PORT=${ZK_ELECTION_PORT:-3888}
      ZK_TICK_TIME=${ZK_TICK_TIME:-2000}
      ZK_INIT_LIMIT=${ZK_INIT_LIMIT:-10}
      ZK_SYNC_LIMIT=${ZK_SYNC_LIMIT:-5}
      ZK_HEAP_SIZE=${ZK_HEAP_SIZE:-2G}
      ZK_MAX_CLIENT_CNXNS=${ZK_MAX_CLIENT_CNXNS:-60}
      ZK_MIN_SESSION_TIMEOUT=${ZK_MIN_SESSION_TIMEOUT:- $((ZK_TICK_TIME*2))}
      ZK_MAX_SESSION_TIMEOUT=${ZK_MAX_SESSION_TIMEOUT:- $((ZK_TICK_TIME*20))}
      ZK_SNAP_RETAIN_COUNT=${ZK_SNAP_RETAIN_COUNT:-3}
      ZK_PURGE_INTERVAL=${ZK_PURGE_INTERVAL:-6}
      ID_FILE="$ZK_DATA_DIR/myid"
      ZK_CONFIG_FILE="$ZK_CONF_DIR/zoo.cfg"
      LOG4J_PROPERTIES="$ZK_CONF_DIR/log4j.properties"
      HOST=$(hostname)
      DOMAIN=`hostname -d`
      ZOOCFG=zoo.cfg
      ZOOCFGDIR=$ZK_CONF_DIR
      
      APPJAR=$(echo $ROOT/*jar)
      CLASSPATH="${ROOT}/lib/*:${APPJAR}:${ZK_CONF_DIR}:"

      if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
          NAME=${BASH_REMATCH[1]}
          ORD=${BASH_REMATCH[2]}
          MY_ID=$((ORD+1))
      else
          echo "Failed to extract ordinal from hostname $HOST"
          exit 1
      fi

      mkdir -p $ZK_DATA_DIR
      mkdir -p $ZK_DATA_LOG_DIR
      echo $MY_ID >> $ID_FILE

      echo "clientPort=$ZK_CLIENT_PORT" >> $ZK_CONFIG_FILE
      echo "dataDir=$ZK_DATA_DIR" >> $ZK_CONFIG_FILE
      echo "dataLogDir=$ZK_DATA_LOG_DIR" >> $ZK_CONFIG_FILE
      echo "tickTime=$ZK_TICK_TIME" >> $ZK_CONFIG_FILE
      echo "initLimit=$ZK_INIT_LIMIT" >> $ZK_CONFIG_FILE
      echo "syncLimit=$ZK_SYNC_LIMIT" >> $ZK_CONFIG_FILE
      echo "maxClientCnxns=$ZK_MAX_CLIENT_CNXNS" >> $ZK_CONFIG_FILE
      echo "minSessionTimeout=$ZK_MIN_SESSION_TIMEOUT" >> $ZK_CONFIG_FILE
      echo "maxSessionTimeout=$ZK_MAX_SESSION_TIMEOUT" >> $ZK_CONFIG_FILE
      echo "autopurge.snapRetainCount=$ZK_SNAP_RETAIN_COUNT" >> $ZK_CONFIG_FILE
      echo "autopurge.purgeInterval=$ZK_PURGE_INTERVAL" >> $ZK_CONFIG_FILE
      echo "4lw.commands.whitelist=*" >> $ZK_CONFIG_FILE
      
            
      # echo "172.24.40.106   bigdata-krb-01.blueprint.lab" >> /etc/hosts
      
      # cat /config-scripts/krb5.conf > /etc/krb5.conf
      
      if [ "x$SECURED" = "x" ]
      then
        JVMFLAGS="-Xmx$ZK_HEAP_SIZE -Xms$ZK_HEAP_SIZE"
      else
        echo "authProvider.1 = org.apache.zookeeper.server.auth.SASLAuthenticationProvider" >> $ZK_CONFIG_FILE
        echo "kerberos.removeHostFromPrincipal = true" >> $ZK_CONFIG_FILE
        echo "kerberos.removeRealmFromPrincipal = true" >> $ZK_CONFIG_FILE
        echo "jaasLoginRenew = 3600000" >> $ZK_CONFIG_FILE
        # echo "requireClientAuthScheme = sasl " >> $ZK_CONFIG_FILE
        export JVMFLAGS0="-Xmx$ZK_HEAP_SIZE -Xms$ZK_HEAP_SIZE -Djava.security.auth.login.config=/config-scripts/zk0-jaas.conf  -Dsun.security.krb5.debug=true  -Djava.security.krb5.conf=/config-scripts/krb5.conf"
        export JVMFLAGS1="-Xmx$ZK_HEAP_SIZE -Xms$ZK_HEAP_SIZE -Djava.security.auth.login.config=/config-scripts/zk1-jaas.conf  -Dsun.security.krb5.debug=true  -Djava.security.krb5.conf=/config-scripts/krb5.conf"
        export JVMFLAGS2="-Xmx$ZK_HEAP_SIZE -Xms$ZK_HEAP_SIZE -Djava.security.auth.login.config=/config-scripts/zk2-jaas.conf  -Dsun.security.krb5.debug=true  -Djava.security.krb5.conf=/config-scripts/krb5.conf"
        export SERVER_JVMFLAGS="-Xmx$ZK_HEAP_SIZE -Xms$ZK_HEAP_SIZE -Djava.security.auth.login.config=/config-scripts/server-jaas.conf  -Dsun.security.krb5.debug=true  -Djava.security.krb5.conf=/config-scripts/krb5.conf"
        export CLIENT_JVMFLAGS="-Xmx$ZK_HEAP_SIZE -Xms$ZK_HEAP_SIZE -Djava.security.auth.login.config=/config-scripts/client-jaas.conf  -Dsun.security.krb5.debug=true  -Djava.security.krb5.conf=/config-scripts/krb5.conf"
        
      fi

      for (( i=1; i<=$ZK_REPLICAS; i++ ))
      do
          echo "server.$i=$NAME-$((i-1)).$DOMAIN:$ZK_SERVER_PORT:$ZK_ELECTION_PORT" >> $ZK_CONFIG_FILE
      done

      rm -f $LOG4J_PROPERTIES

      echo "zookeeper.root.logger=$ZK_LOG_LEVEL, CONSOLE" >> $LOG4J_PROPERTIES
      echo "zookeeper.console.threshold=$ZK_LOG_LEVEL" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.threshold=$ZK_LOG_LEVEL" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.dir=$ZK_DATA_LOG_DIR" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.file=zookeeper.log" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.maxfilesize=256MB" >> $LOG4J_PROPERTIES
      echo "zookeeper.log.maxbackupindex=10" >> $LOG4J_PROPERTIES
      echo "zookeeper.tracelog.dir=$ZK_DATA_LOG_DIR" >> $LOG4J_PROPERTIES
      echo "zookeeper.tracelog.file=zookeeper_trace.log" >> $LOG4J_PROPERTIES
      echo "log4j.rootLogger=\${zookeeper.root.logger}" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout" >> $LOG4J_PROPERTIES
      echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n" >> $LOG4J_PROPERTIES
      
      if [ -z "$JMXDISABLE" ]
      then
          MAIN=org.apache.zookeeper.server.quorum.QuorumPeerMain
      else
          MAIN="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=$JMXPORT -Dcom.sun.management.jmxremote.authenticate=$JMXAUTH -Dcom.sun.management.jmxremote.ssl=$JMXSSL -Dzookeeper.jmx.log4j.disable=$JMXLOG4J org.apache.zookeeper.server.quorum.QuorumPeerMain"
      fi

      set -x
      
      if [ "$(hostname)" = "zk-zookeeper-0" ]
      then
        exec java -cp "$CLASSPATH" $JVMFLAGS0 $MAIN $ZK_CONFIG_FILE
      elif [ "$(hostname)" = "zk-zookeeper-1" ]
      then
        exec java -cp "$CLASSPATH" $JVMFLAGS1 $MAIN $ZK_CONFIG_FILE
      else 
        exec java -cp "$CLASSPATH" $JVMFLAGS2 $MAIN $ZK_CONFIG_FILE
      fi
    zk0-jaas.conf: |
      Server { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab="/etc/security/keytabs/zk0.service.keytab" storeKey=true useTicketCache=false principal="zookeeper/zk-zookeeper-0.zk-zookeeper-headless.tkg-bigdata-ns.svc.cluster.local@BIG-DATA.BLUEPRINT.LAB"; };
    
    zk1-jaas.conf: |
      Server { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab="/etc/security/keytabs/zk1.service.keytab" storeKey=true useTicketCache=false principal="zookeeper/zk-zookeeper-1.zk-zookeeper-headless.tkg-bigdata-ns.svc.cluster.local@BIG-DATA.BLUEPRINT.LAB"; };
    
    zk2-jaas.conf: |
      Server { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab="/etc/security/keytabs/zk2.service.keytab" storeKey=true useTicketCache=false principal="zookeeper/zk-zookeeper-2.zk-zookeeper-headless.tkg-bigdata-ns.svc.cluster.local@BIG-DATA.BLUEPRINT.LAB"; };
    
    server-jaas.conf: |
      Server { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=true keyTab="/etc/security/keytabs/zookeeper.service.keytab" storeKey=true useTicketCache=false principal="zookeeper/zookeeper@BIG-DATA.BLUEPRINT.LAB"; };
    client-jaas.conf: |
      Client { com.sun.security.auth.module.Krb5LoginModule required useKeyTab=false useTicketCache=true; };
  
    krb5.conf: |
      # To opt out of the system crypto-policies configuration of krb5, remove the
      # symlink at /etc/krb5.conf.d/crypto-policies which will not be recreated.
      includedir /etc/krb5.conf.d/
      
      [logging]
          default = FILE:/var/log/krb5libs.log
          kdc = FILE:/var/log/krb5kdc.log
          admin_server = FILE:/var/log/kadmind.log
      
      [libdefaults]
          dns_lookup_realm = true
          dns_lookup_kdc = true
          ticket_lifetime = 24h
          renew_lifetime = 7d
          forwardable = true
          rdns = false
          pkinit_anchors = FILE:/etc/pki/tls/certs/ca-bundle.crt
          spake_preauth_groups = edwards25519
          default_realm = {{ .Values.realm }}
          # default_ccache_name = KEYRING:persistent:%{uid}
      
      [realms]
       {{ .Values.realm }} = {
           kdc = bigdata-krb-01.blueprint.lab
           admin_server = bigdata-krb-01.blueprint.lab
       }
      
      [domain_realm]
       .{{ .Values.realm }} = {{ .Values.realm }}
       {{ .Values.realm }} = {{ .Values.realm }}